//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

using System.Xml.Linq;

namespace TremolZFP
{
     public class FP : FPcore
     {
         public FP(long vers)
         {
             VersionDef = vers;
         }

         /// <summary>
         /// Provides information about device's GPRS signal.
         /// </summary>
         public string ReadGPRS_Signal()
         {
             return CreateRes<string>(Do("ReadGPRS_Signal"));
         }

         /// <summary>
         /// Prints an article report with or without zeroing ('Z' or 'X').
         /// </summary>
         /// <param name="optionZeroing">with following values: 
         ///  - 'Z' - Zeroing 
         ///  - 'X' - Without zeroing</param>
         public void PrintArticleReport(OptionZeroing optionZeroing)
         {
             Do("PrintArticleReport", "OptionZeroing", optionZeroing);
         }

         /// <summary>
         /// Provides information about the current (the last value stored into the FM) decimal point format.
         /// </summary>
         public OptionDecimalPointPosition ReadDecimalPoint()
         {
             return CreateRes<OptionDecimalPointPosition>(Do("ReadDecimalPoint"));
         }

         /// <summary>
         /// Programs the number of POS, printing of logo, cash drawer opening, cutting permission, external display management mode, sending receipts, enable or disable currency in receipt and working operators counter.
         /// </summary>
         /// <param name="pOSNum">4 symbols for number of POS in format ####</param>
         /// <param name="optionPrintLogo">1 symbol of value: 
         ///  - '1' - Yes 
         ///  - '0' - No</param>
         /// <param name="optionAutoOpenDrawer">1 symbol of value: 
         ///  - '1' - Yes 
         ///  - '0' - No</param>
         /// <param name="optionAutoCut">1 symbol of value: 
         ///  - '1' - Yes 
         ///  - '0' - No</param>
         /// <param name="optionExternalDispManagement">1 symbol of value: 
         ///  - '1' - Manual 
         ///  - '0' - Auto</param>
         /// <param name="optionWorkOperatorCount">1 symbol of value: 
         ///  - '1' - One 
         ///  - '0' - More</param>
         public void ProgParameters(decimal pOSNum, OptionPrintLogo optionPrintLogo, OptionAutoOpenDrawer optionAutoOpenDrawer, OptionAutoCut optionAutoCut, OptionExternalDispManagement optionExternalDispManagement, OptionWorkOperatorCount optionWorkOperatorCount)
         {
             Do("ProgParameters", "POSNum", pOSNum, "OptionPrintLogo", optionPrintLogo, "OptionAutoOpenDrawer", optionAutoOpenDrawer, "OptionAutoCut", optionAutoCut, "OptionExternalDispManagement", optionExternalDispManagement, "OptionWorkOperatorCount", optionWorkOperatorCount);
         }

         /// <summary>
         /// Provides information about the accumulated amount by VAT group.
         /// </summary>
         public DailySaleAmountsByVATRes ReadDailySaleAmountsByVAT()
         {
             return CreateRes<DailySaleAmountsByVATRes>(Do("ReadDailySaleAmountsByVAT"));
         }

         /// <summary>
         /// Start LAN test on the device and print out the result
         /// </summary>
         public void StartTest_Lan()
         {
             Do("StartTest_Lan");
         }

         /// <summary>
         /// Provides information for the programmed data, the turnover from the stated department number
         /// </summary>
         /// <param name="depNum">2 symbols for deparment number in format: ##</param>
         public DepartmentRes ReadDepartment(decimal depNum)
         {
             return CreateRes<DepartmentRes>(Do("ReadDepartment", "DepNum", depNum));
         }

         /// <summary>
         /// Provides information about the number of the last issued receipt.
         /// </summary>
         public decimal ReadLastReceiptNum()
         {
             return CreateRes<decimal>(Do("ReadLastReceiptNum"));
         }

         /// <summary>
         /// Programs the general data for a certain article in the internal FD database. The price may have variable length, while the name field is fixed.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number</param>
         /// <param name="pLUName">32 symbols for article name</param>
         /// <param name="price">1 to 10 symbols for article price</param>
         /// <param name="flagsPriceQty">1 symbols with value: 
         /// Flags.7=1 
         /// Flags.6=0 
         /// Flags.5=1 Yes, Flags.5=0 No (Fractional quantity disabled) 
         /// Flags.4=1 Yes, Flags.4=0 No (Single Transaction) 
         /// Flags.3=1 Yes, Flags.3=0 No (Allow negative quantity) 
         /// Flags.2=1 Yes, Flags.2=0 No (Monitoring quantity in stock) 
         /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
         /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</param>
         /// <param name="optionVATClass">1 character for article VAT Class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         /// <param name="belongToDepNum">BelongToDepNum + 80h, 1 symbol for article 
         /// department attachment, formed in the following manner: 
         /// BelongToDepNum[HEX] + 80h example: Dep01 = 81h, Dep02 = 82h â€¦ 
         /// Dep19 = 93h</param>
         /// <param name="availableQuantity">Up to 11 symbols for quantity in stock</param>
         /// <param name="barcode">13 symbols for barcode</param>
         public void ProgPLUgeneral(string pLUNum, string pLUName, decimal price, byte flagsPriceQty, OptionVATClass optionVATClass, int belongToDepNum, decimal availableQuantity, string barcode)
         {
             Do("ProgPLUgeneral", "PLUNum", pLUNum, "PLUName", pLUName, "Price", price, "FlagsPriceQty", flagsPriceQty, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum, "AvailableQuantity", availableQuantity, "Barcode", barcode);
         }

         /// <summary>
         /// Program the number of symbols per line.
         /// </summary>
         /// <param name="password">6 symbols for password</param>
         /// <param name="optionLineSymbols">1 symbol with value: 
         ///  - '0' - Symbols per line 32 
         ///  - '1' - Symbols per line 48</param>
         public void ProgSymbolsPerLine(string password, OptionLineSymbols optionLineSymbols)
         {
             Do("ProgSymbolsPerLine", "Password", password, "OptionLineSymbols", optionLineSymbols);
         }

         /// <summary>
         /// Print or store Electronic Journal report with all documents.
         /// </summary>
         public void PrintEJ()
         {
             Do("PrintEJ");
         }

         /// <summary>
         /// Provides information about the communication module, used for talking with the server
         /// </summary>
         public OptionCommunicationModule ReadUsedComModule()
         {
             return CreateRes<OptionCommunicationModule>(Do("ReadUsedComModule"));
         }

         /// <summary>
         /// Restore previous header if current header is not saved into fiscal memory.
         /// </summary>
         public void RestorePreviousHeader()
         {
             Do("RestorePreviousHeader");
         }

         /// <summary>
         /// Opens the cash drawer.
         /// </summary>
         public void CashDrawerOpen()
         {
             Do("CashDrawerOpen");
         }

         /// <summary>
         /// Program device's TCP password. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the password len</param>
         /// <param name="password">Up to 100 symbols for the TCP password</param>
         public void SetTCPpassword(decimal passLength, string password)
         {
             Do("SetTCPpassword", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.
         /// </summary>
         /// <param name="text">40 symbols text</param>
         public void DisplayTextLines1and2(string text)
         {
             Do("DisplayTextLines1and2", "Text", text);
         }

         /// <summary>
         /// Register the sell with specified quantity of article from the internal FD database.
         /// </summary>
         /// <param name="optionSign">1 symbol with optional value: 
         ///  - '+' -Sale 
         ///  - '-' - Correction</param>
         /// <param name="pLUNum">5 symbols for PLU number of FD's database in format #####</param>
         /// <param name="price">Up to 10 symbols for sale price</param>
         /// <param name="quantity">Up to 10 symbols for article's quantity sold</param>
         /// <param name="discAddP">Up to 7 for percentage of discount/addition. Use minus 
         /// sign '-' for discount</param>
         /// <param name="discAddV">Up to 8 symbolsfor percentage of discount/addition. 
         /// Use minus sign '-' for discount</param>
         public void SellPLUFromFD_DB(OptionSign optionSign, decimal pLUNum, decimal? price, decimal? quantity, decimal? discAddP, decimal? discAddV)
         {
             Do("SellPLUFromFD_DB", "OptionSign", optionSign, "PLUNum", pLUNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
         }

         /// <summary>
         /// Read temporary header language
         /// </summary>
         public OptionLanguage ReadTempLanguage()
         {
             return CreateRes<OptionLanguage>(Do("ReadTempLanguage"));
         }

         /// <summary>
         /// Provides information about the amounts returned as sales change.
         /// </summary>
         public DailyReturnedRes ReadDailyReturned()
         {
             return CreateRes<DailyReturnedRes>(Do("ReadDailyReturned"));
         }

         /// <summary>
         /// Provides information about the current date and time.
         /// </summary>
         public DateTime ReadDateTime()
         {
             return CreateRes<DateTime>(Do("ReadDateTime"));
         }

         /// <summary>
         /// Register the payment in the receipt with specified type of payment and exact amount received.
         /// </summary>
         /// <param name="optionPaymentType">1 symbol with values  
         ///  - '0' - Cash 
         ///  - '1' - Card  
         ///  - '2' - Voucher  
         ///  - '3' - Credit 
         ///  - '4' - Currency</param>
         public void PayExactSum(OptionPaymentType optionPaymentType)
         {
             Do("PayExactSum", "OptionPaymentType", optionPaymentType);
         }

         /// <summary>
         /// Start WiFi test on the device and print out the result
         /// </summary>
         public void StartTest_WiFi()
         {
             Do("StartTest_WiFi");
         }

         /// <summary>
         /// Provides information about TCP device MAC address
         /// </summary>
         /// <param name="deviceMAC">12 symbols for device MAC</param>
         public void SetDeviceMAC_Address(string deviceMAC)
         {
             Do("SetDeviceMAC_Address", "DeviceMAC", deviceMAC);
         }

         /// <summary>
         /// Read the number of the remaining free records for Z-report in the Fiscal Memory and check sum, resets, header, tax, sd card and registration changes of FM MCU flash memory.
         /// </summary>
         public FMfreeRecordsRes ReadFMfreeRecords()
         {
             return CreateRes<FMfreeRecordsRes>(Do("ReadFMfreeRecords"));
         }

         /// <summary>
         /// Provides information about device's Bluetooth password.
         /// </summary>
         public Bluetooth_PasswordRes ReadBluetooth_Password()
         {
             return CreateRes<Bluetooth_PasswordRes>(Do("ReadBluetooth_Password"));
         }

         /// <summary>
         /// Read Electronic Journal Report from receipt number to receipt number.
         /// </summary>
         /// <param name="startReceiptNum">6 symbols for initial receipt number included in report in format ######</param>
         /// <param name="endReceiptNum">6 symbols for final receipt number included in report in format ######</param>
         public void ReadEJFromReceiptToReceipt(decimal startReceiptNum, decimal endReceiptNum)
         {
             Do("ReadEJFromReceiptToReceipt", "StartReceiptNum", startReceiptNum, "EndReceiptNum", endReceiptNum);
         }

         /// <summary>
         /// Register the sell of department.
         /// </summary>
         /// <param name="namePLU">36 symbols for name of sale. 34 symbols are printed on paper.</param>
         /// <param name="depNum">1 symbol for article department 
         /// attachment, formed in the following manner: DepNum[HEX] + 80h example: 
         /// Dep01 = 81h, Dep02 = 82h â€¦ Dep19 = 93h</param>
         /// <param name="price">Up to 10 symbols for article's price.</param>
         /// <param name="quantity">Up to 10 symbols for article's quantity sold</param>
         /// <param name="discAddP">Up to 7 for percentage of discount/addition. Use minus 
         /// sign '-' for discount</param>
         /// <param name="discAddV">Up to 8 symbols for percentage of discount/addition. 
         /// Use minus sign '-' for discount</param>
         public void SellPLUfromDep(string namePLU, int depNum, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV)
         {
             Do("SellPLUfromDep", "NamePLU", namePLU, "DepNum", depNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
         }

         /// <summary>
         /// Print whole special FM events report.
         /// </summary>
         public void PrintSpecialEventsFMreport()
         {
             Do("PrintSpecialEventsFMreport");
         }

         /// <summary>
         /// Provides information about device's idle timeout. This timeout is for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi.
         /// </summary>
         public decimal Read_IdleTimeout()
         {
             return CreateRes<decimal>(Do("Read_IdleTimeout"));
         }

         /// <summary>
         /// Read data for the state department number and different names.
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         public DepartmentDifferentNameRes ReadDepartmentDifferentName(decimal number)
         {
             return CreateRes<DepartmentDifferentNameRes>(Do("ReadDepartmentDifferentName", "Number", number));
         }

         /// <summary>
         /// Programs the operator's name and password.
         /// </summary>
         /// <param name="number">Symbols from '1' to '20' corresponding to operator's number</param>
         /// <param name="name">20 symbols for operator's name</param>
         /// <param name="password">6 symbols for operator's password</param>
         public void ProgOperator(decimal number, string name, string password)
         {
             Do("ProgOperator", "Number", number, "Name", name, "Password", password);
         }

         /// <summary>
         /// Program device's Bluetooth password.
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the BT password len</param>
         /// <param name="password">Up to 100 symbols for the BT password</param>
         public void SetBluetooth_Password(decimal passLength, string password)
         {
             Do("SetBluetooth_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Provides information about device's GRPS APN.
         /// </summary>
         public GPRS_APNRes ReadGPRS_APN()
         {
             return CreateRes<GPRS_APNRes>(Do("ReadGPRS_APN"));
         }

         /// <summary>
         /// Provides information about the quantity registers of the specified article.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
         public PLUqtyRes ReadPLUqty(decimal pLUNum)
         {
             return CreateRes<PLUqtyRes>(Do("ReadPLUqty", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Set data for the state department number and different name.
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         /// <param name="nameAlbanian">23 characters for Albanian name</param>
         /// <param name="nameSerbian">23 characters Serbian name</param>
         /// <param name="nameEnglish">23 characters English name</param>
         public void ProgDepartmentDifferentName(decimal number, string nameAlbanian, string nameSerbian, string nameEnglish)
         {
             Do("ProgDepartmentDifferentName", "Number", number, "NameAlbanian", nameAlbanian, "NameSerbian", nameSerbian, "NameEnglish", nameEnglish);
         }

         /// <summary>
         /// Scan and print all available WiFi networks
         /// </summary>
         public void ScanAndPrintWiFiNetworks()
         {
             Do("ScanAndPrintWiFiNetworks");
         }

         /// <summary>
         /// Provides information about the manufacturing number of the fiscal device, FM number and ECR Unique number.
         /// </summary>
         public SerialAndFiscalNumsRes ReadSerialAndFiscalNums()
         {
             return CreateRes<SerialAndFiscalNumsRes>(Do("ReadSerialAndFiscalNums"));
         }

         /// <summary>
         /// Program the communication module, which used to talk with the server
         /// </summary>
         /// <param name="optionCommunicationModule">1 symbol with value: 
         ///  - '0' - GSM 
         ///  - '1' - LAN</param>
         public void SetServerCommunicationModule(OptionCommunicationModule optionCommunicationModule)
         {
             Do("SetServerCommunicationModule", "OptionCommunicationModule", optionCommunicationModule);
         }

         /// <summary>
         /// Provides information about device's GPRS username.
         /// </summary>
         public GPRS_UsernameRes ReadGPRS_Username()
         {
             return CreateRes<GPRS_UsernameRes>(Do("ReadGPRS_Username"));
         }

         /// <summary>
         /// Registers cash received on account or paid out.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to the operator's number</param>
         /// <param name="operPass">6 symbols for operator's password</param>
         /// <param name="amount">Up to 10 symbols for the amount lodged/withdrawn</param>
         /// <param name="text">TextLength-2 symbols. In the beginning and in the end of line symbol '#' is 
         /// printed.</param>
         public void ReceivedOnAccount_PaidOut(decimal operNum, string operPass, decimal amount, string text)
         {
             Do("ReceivedOnAccount_PaidOut", "OperNum", operNum, "OperPass", operPass, "Amount", amount, "Text", text);
         }

         /// <summary>
         /// After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.
         /// </summary>
         public void SaveNetworkSettings()
         {
             Do("SaveNetworkSettings");
         }

         /// <summary>
         /// Read CM info
         /// </summary>
         public CMinfoRes ReadCMinfo()
         {
             return CreateRes<CMinfoRes>(Do("ReadCMinfo"));
         }

         /// <summary>
         /// Provides information about period in which the sending attempt is made.
         /// </summary>
         public decimal ReadECRprofileConnectionPeriod()
         {
             return CreateRes<decimal>(Do("ReadECRprofileConnectionPeriod"));
         }

         /// <summary>
         /// Executes the direct command .
         /// </summary>
         /// <param name="input">Raw request to FP</param>
         public string DirectCommand(string input)
         {
             return CreateRes<string>(Do("DirectCommand", "Input", input));
         }

         /// <summary>
         /// Storage a detailed FM report by initial and end FM report number.
         /// </summary>
         /// <param name="startNum">4 symbols for the initial report number included in report, format ####</param>
         /// <param name="endNum">4 symbols for the final report number included in report, format ####</param>
         public void ReadDetailedFMReportByZNum(decimal startNum, decimal endNum)
         {
             Do("ReadDetailedFMReportByZNum", "StartNum", startNum, "EndNum", endNum);
         }

         /// <summary>
         /// Read Electronic Journal Report from by number of Z report blocks.
         /// </summary>
         /// <param name="startZNum">4 symbols for initial number report in format ####</param>
         /// <param name="endZNum">4 symbols for final number report in format ####</param>
         public void ReadEJByZBlocks(decimal startZNum, decimal endZNum)
         {
             Do("ReadEJByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
         }

         /// <summary>
         /// Read the current status of the receipt.
         /// </summary>
         public CurrentRecInfoRes ReadCurrentRecInfo()
         {
             return CreateRes<CurrentRecInfoRes>(Do("ReadCurrentRecInfo"));
         }

         /// <summary>
         /// Program device's WiFi network name where it will connect. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="wiFiNameLength">Up to 3 symbols for the WiFi network name len</param>
         /// <param name="wiFiNetworkName">Up to 100 symbols for the device's WiFi ssid network name</param>
         public void SetWiFi_NetworkName(decimal wiFiNameLength, string wiFiNetworkName)
         {
             Do("SetWiFi_NetworkName", "WiFiNameLength", wiFiNameLength, "WiFiNetworkName", wiFiNetworkName);
         }

         /// <summary>
         /// Read Electronic Journal Report from by number of Z report blocks only of the current receipt .
         /// </summary>
         /// <param name="startZNum">4 symbols for initial number report in format ####</param>
         /// <param name="endZNum">4 symbols for final number report in format ####</param>
         public void ReadEJByZBlocksWithoutReceipts(decimal startZNum, decimal endZNum)
         {
             Do("ReadEJByZBlocksWithoutReceipts", "StartZNum", startZNum, "EndZNum", endZNum);
         }

         /// <summary>
         /// Select type of display
         /// </summary>
         /// <param name="optionExternalDisplay">1 symbol with value: 
         /// -'1' - Tremol display 
         /// -'0' - Others</param>
         public void SelectExternalDisplay(OptionExternalDisplay optionExternalDisplay)
         {
             Do("SelectExternalDisplay", "OptionExternalDisplay", optionExternalDisplay);
         }

         /// <summary>
         /// Print a detailed FM report by initial and end FM report number.
         /// </summary>
         /// <param name="startNum">4 symbols for the initial report number included in report, format ####</param>
         /// <param name="endNum">4 symbols for the final report number included in report, format ####</param>
         public void PrintDetailedFMReportByNum(decimal startNum, decimal endNum)
         {
             Do("PrintDetailedFMReportByNum", "StartNum", startNum, "EndNum", endNum);
         }

         /// <summary>
         /// Read info for enable/disable short receipts
         /// </summary>
         public OptionActivationRS ReadShortReceiptSending()
         {
             return CreateRes<OptionActivationRS>(Do("ReadShortReceiptSending"));
         }

         /// <summary>
         /// Provides information about TCP device MAC address
         /// </summary>
         public string ReadDeviceMAC_Address()
         {
             return CreateRes<string>(Do("ReadDeviceMAC_Address"));
         }

         /// <summary>
         /// Register the sell of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
         /// </summary>
         /// <param name="namePLU">36 symbols for article's name</param>
         /// <param name="optionVATClass">1 character for VAT class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         /// <param name="price">Up to 10 symbols for article's price.</param>
         /// <param name="quantity">Up to 10 symbols for quantity</param>
         /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
         /// Use minus sign '-' for discount</param>
         /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
         /// Use minus sign '-' for discount</param>
         /// <param name="depNum">2 symbol for article department 
         /// attachment, formed in the following manner: DepNum[HEX] + 80h 
         /// example: Dep01 = 81h, Dep02 = 82h â€¦ Dep19 = 93h</param>
         public void SellPLUwithSpecifiedVAT(string namePLU, OptionVATClass optionVATClass, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, int? depNum)
         {
             Do("SellPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
         }

         /// <summary>
         /// Print a brief FM report by initial and end date.
         /// </summary>
         /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
         public void PrintBriefFMReportByDate(DateTime startDate, DateTime endDate)
         {
             Do("PrintBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
         }

         /// <summary>
         /// Read Service mode status
         /// </summary>
         public OptionServiceMode ReadServiceMode()
         {
             return CreateRes<OptionServiceMode>(Do("ReadServiceMode"));
         }

         /// <summary>
         /// Shows a 20-symbols text in the upper external display line.
         /// </summary>
         /// <param name="text">20 symbols text</param>
         public void DisplayTextLine1(string text)
         {
             Do("DisplayTextLine1", "Text", text);
         }

         /// <summary>
         /// Provides information about the ECR's password
         /// </summary>
         public ServerAddressRes ReadServerAddress()
         {
             return CreateRes<ServerAddressRes>(Do("ReadServerAddress"));
         }

         /// <summary>
         /// Provides information about the current VAT rates which are the last values stored into the FM.
         /// </summary>
         public VATratesRes ReadVATrates()
         {
             return CreateRes<VATratesRes>(Do("ReadVATrates"));
         }

         /// <summary>
         /// Provides information about the amounts received from sales.
         /// </summary>
         public DailyReceivedSalesAmountsRes ReadDailyReceivedSalesAmounts()
         {
             return CreateRes<DailyReceivedSalesAmountsRes>(Do("ReadDailyReceivedSalesAmounts"));
         }

         /// <summary>
         /// Programs available quantity and quantiy type for a certain article in the internal database.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         /// <param name="availableQuantity">Up to 11 symbols for quantity in stock</param>
         /// <param name="optionQuantityType">1 symbol for Quantity flag with next value:  
         ///  - '0'- Availability of PLU stock is not monitored  
         ///  - '1'- Disable negative quantity  
         ///  - '2'- Enable negative quantity</param>
         public void ProgPLUqty(decimal pLUNum, decimal availableQuantity, OptionQuantityType optionQuantityType)
         {
             Do("ProgPLUqty", "PLUNum", pLUNum, "AvailableQuantity", availableQuantity, "OptionQuantityType", optionQuantityType);
         }

         /// <summary>
         /// Provides information about the owner's numbers and registration date time.
         /// </summary>
         public RegistrationInfoRes ReadRegistrationInfo()
         {
             return CreateRes<RegistrationInfoRes>(Do("ReadRegistrationInfo"));
         }

         /// <summary>
         /// Clears the external display.
         /// </summary>
         public void ClearDisplay()
         {
             Do("ClearDisplay");
         }

         /// <summary>
         /// Program device's TCP network DHCP enabled or disabled. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="optionDhcpStatus">1 symbol with value: 
         ///  - '0' - Disabled 
         ///  - '1' - Enabled</param>
         public void SetDHCP_Enabled(OptionDhcpStatus optionDhcpStatus)
         {
             Do("SetDHCP_Enabled", "OptionDhcpStatus", optionDhcpStatus);
         }

         /// <summary>
         /// Program device's GPRS APN. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="gPRS_APN_Len">Up to 3 symbols for the APN len</param>
         /// <param name="aPN">Up to 100 symbols for the device's GPRS APN</param>
         public void SetGPRS_APN(decimal gPRS_APN_Len, string aPN)
         {
             Do("SetGPRS_APN", "GPRS_APN_Len", gPRS_APN_Len, "APN", aPN);
         }

         /// <summary>
         /// Provides information about the PO and the total number of operations by specified operator.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
         /// number</param>
         public DailyPObyOperatorRes ReadDailyPObyOperator(decimal operNum)
         {
             return CreateRes<DailyPObyOperatorRes>(Do("ReadDailyPObyOperator", "OperNum", operNum));
         }

         /// <summary>
         /// Printing Electronic Journal Report from receipt number to receipt number.
         /// </summary>
         /// <param name="startReceiptNum">6 symbols for initial receipt number included in report in format ######</param>
         /// <param name="endReceiptNum">6 symbols for final receipt number included in report in format ######</param>
         public void PrintEJByReceiptNumFromZrep(decimal startReceiptNum, decimal endReceiptNum)
         {
             Do("PrintEJByReceiptNumFromZrep", "StartReceiptNum", startReceiptNum, "EndReceiptNum", endReceiptNum);
         }

         /// <summary>
         /// Program the price for a certain article from the internal database.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         /// <param name="price">Up to 10 symbols for article price</param>
         /// <param name="optionPrice">1 byte for Price flag with next value: 
         ///  - '0'- Free price is disable valid only programmed price 
         ///  - '1'- Free price is enable 
         ///  - '2'- Limited price</param>
         public void ProgPLUprice(decimal pLUNum, decimal price, OptionPrice optionPrice)
         {
             Do("ProgPLUprice", "PLUNum", pLUNum, "Price", price, "OptionPrice", optionPrice);
         }

         /// <summary>
         ///  Reads raw bytes from FP.
         /// </summary>
         /// <param name="count">How many bytes to read if EndChar is not specified</param>
         /// <param name="endChar">The character marking the end of the data. If present Count parameter is ignored.</param>
         public byte[] RawRead(decimal count, string endChar)
         {
             return CreateRes<byte[]>(Do("RawRead", "Count", count, "EndChar", endChar));
         }

         /// <summary>
         /// Provides information about device's DHCP status
         /// </summary>
         public OptionDhcpStatus ReadDHCP_Status()
         {
             return CreateRes<OptionDhcpStatus>(Do("ReadDHCP_Status"));
         }

         /// <summary>
         /// Provides information about device's IP address, subnet mask, gateway address, DNS address.
         /// </summary>
         /// <param name="optionAddressType">1 symbol with value: 
         ///  - '2' - IP address 
         ///  - '3' - Subnet Mask 
         ///  - '4' - Gateway address 
         ///  - '5' - DNS address</param>
         public TCP_AddressesRes ReadTCP_Addresses(OptionAddressType optionAddressType)
         {
             return CreateRes<TCP_AddressesRes>(Do("ReadTCP_Addresses", "OptionAddressType", optionAddressType));
         }

         /// <summary>
         /// Programs the general data for a certain taxi service in the internal FD database. The name field is fixed.
         /// </summary>
         /// <param name="serviceNum">2 symbols for service number</param>
         /// <param name="serviceNameAL">30 symbols for service name</param>
         /// <param name="serviceNameSR">30 symbols for service name</param>
         /// <param name="serviceNameEN">30 symbols for service name</param>
         /// <param name="optionVATClass">1 character for article VAT Class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         public void ProgTaxiServiceGeneral(string serviceNum, string serviceNameAL, string serviceNameSR, string serviceNameEN, OptionVATClass optionVATClass)
         {
             Do("ProgTaxiServiceGeneral", "ServiceNum", serviceNum, "ServiceNameAL", serviceNameAL, "ServiceNameSR", serviceNameSR, "ServiceNameEN", serviceNameEN, "OptionVATClass", optionVATClass);
         }

         /// <summary>
         /// Provides information about device's profile type.
         /// </summary>
         public OptionProfileType ReadECRprofileType()
         {
             return CreateRes<OptionProfileType>(Do("ReadECRprofileType"));
         }

         /// <summary>
         /// Program the contents of a header lines.
         /// </summary>
         /// <param name="optionHeaderLine">1 symbol with value: 
         ///  - '1' - Header 1 
         ///  - '2' - Header 2 
         ///  - '3' - Header 3 
         ///  - '4' - Header 4 
         ///  - '5' - Header 5 
         ///  - '6' - Header 6 
         ///  - '7' - Header 7 
         ///  - '8' - Header 8</param>
         /// <param name="headerText">TextLength symbols for header lines</param>
         public void ProgHeader(OptionHeaderLine optionHeaderLine, string headerText)
         {
             Do("ProgHeader", "OptionHeaderLine", optionHeaderLine, "HeaderText", headerText);
         }

         /// <summary>
         /// Read the language of the device
         /// </summary>
         public OptionLanguage ReadLanguage()
         {
             return CreateRes<OptionLanguage>(Do("ReadLanguage"));
         }

         /// <summary>
         /// Prints out SD card, crypto modul and FM diagnostic receipt.
         /// </summary>
         /// <param name="optionDiagnostics">1 symbol with values: 
         ///  - 'S'- SD card 
         ///  - 'C' - Crypto modul 
         ///  - 'F' - FM</param>
         public void PrintOptionalDiagnostics(OptionDiagnostics optionDiagnostics)
         {
             Do("PrintOptionalDiagnostics", "OptionDiagnostics", optionDiagnostics);
         }

         /// <summary>
         /// Provides information about the price and different name of the specified article.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
         public PLUDifferentNameRes ReadPLUDifferentName(decimal pLUNum)
         {
             return CreateRes<PLUDifferentNameRes>(Do("ReadPLUDifferentName", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Set data for the state department number from the internal FD database.
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         /// <param name="name">23 characters department name</param>
         /// <param name="optionVATClass">1 character for article VAT Class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         /// <param name="price">Up to 10 symbols for department price</param>
         /// <param name="flagsPrice">1 symbol with value: 
         /// Flags.7=1 
         /// Flags.6=0 
         /// Flags.5=0 
         /// Flags.4=0 
         /// Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
         /// Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
         /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
         /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</param>
         public void ProgDepartmentOption1(decimal number, string name, OptionVATClass optionVATClass, decimal price, byte flagsPrice)
         {
             Do("ProgDepartmentOption1", "Number", number, "Name", name, "OptionVATClass", optionVATClass, "Price", price, "FlagsPrice", flagsPrice);
         }

         /// <summary>
         /// Removes all paired devices.
         /// </summary>
         public void UnpairAllDevices()
         {
             Do("UnpairAllDevices");
         }

         /// <summary>
         /// Shows the current date and time on the external display.
         /// </summary>
         public void DisplayDateTime()
         {
             Do("DisplayDateTime");
         }

         /// <summary>
         /// Register the refund of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
         /// </summary>
         /// <param name="namePLU">36 symbols for article's name</param>
         /// <param name="optionVATClass">1 character for VAT class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         /// <param name="price">Up to 10 symbols for article's price.</param>
         /// <param name="quantity">Up to 10 symbols for quantity</param>
         /// <param name="discAddP">Up to 7 symbols for percentage of discount/addition. 
         /// Use minus sign '-' for discount</param>
         /// <param name="discAddV">Up to 8 symbols for value of discount/addition. 
         /// Use minus sign '-' for discount</param>
         /// <param name="depNum">1 symbol for article department 
         /// attachment, formed in the following manner; example: Dep01=81h, 
         /// Dep02=82h â€¦ Dep19=93h</param>
         public void RefundPLUwithSpecifiedVAT(string namePLU, OptionVATClass optionVATClass, decimal price, decimal? quantity, decimal? discAddP, decimal? discAddV, int? depNum)
         {
             Do("RefundPLUwithSpecifiedVAT", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV, "DepNum", depNum);
         }

         /// <summary>
         /// Set device's TCP autostart . To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="optionTCPAutoStart">1 symbol with value: 
         ///  - '0' - No 
         ///  - '1' - Yes</param>
         public void SetTCP_AutoStart(OptionTCPAutoStart optionTCPAutoStart)
         {
             Do("SetTCP_AutoStart", "OptionTCPAutoStart", optionTCPAutoStart);
         }

         /// <summary>
         /// Sets the used TCP module for communication - Lan or WiFi. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="optionUsedModule">1 symbol with value: 
         ///  - '1' - LAN 
         ///  - '2' - WiFi</param>
         public void SetTCP_ActiveModule(OptionUsedModule optionUsedModule)
         {
             Do("SetTCP_ActiveModule", "OptionUsedModule", optionUsedModule);
         }

         /// <summary>
         /// Provides information about the price and name of the specified  article.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         public PLUNameRes ReadPLUName(decimal pLUNum)
         {
             return CreateRes<PLUNameRes>(Do("ReadPLUName", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Read the used TCP module for communication - Lan or WiFi. Command is available if the device support both modules only.
         /// </summary>
         public OptionUsedModule ReadTCP_UsedModule()
         {
             return CreateRes<OptionUsedModule>(Do("ReadTCP_UsedModule"));
         }

         /// <summary>
         /// Program the price for a certain article and name.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         /// <param name="pLUName">32 symbols for PLU name</param>
         public void ProgPLUName(decimal pLUNum, string pLUName)
         {
             Do("ProgPLUName", "PLUNum", pLUNum, "PLUName", pLUName);
         }

         /// <summary>
         /// Feeds one line of paper.
         /// </summary>
         public void PaperFeed()
         {
             Do("PaperFeed");
         }

         /// <summary>
         /// Close the fiscal receipt (Fiscal receipt, or Non-fical receipt). When the payment is finished.
         /// </summary>
         public void CloseReceipt()
         {
             Do("CloseReceipt");
         }

         /// <summary>
         /// Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.
         /// </summary>
         /// <param name="optionCodeType">1 symbol with possible values: 
         ///  - '0' - UPC A 
         ///  - '1' - UPC E 
         ///  - '2' - EAN 13 
         ///  - '3' - EAN 8 
         ///  - '4' - CODE 39 
         ///  - '5' - ITF 
         ///  - '6' - CODABAR 
         ///  - 'H' - CODE 93 
         ///  - 'I' - CODE 128</param>
         /// <param name="codeLen">1..2 bytes for number of bytes according to the table</param>
         /// <param name="codeData">From 0 to 255 bytes data in range according to the table</param>
         /// <param name="optionCenter">1 symbol in order to place the barcode in the middle: 
         /// -'1' - Yes 
         /// -'0' - No</param>
         public void PrintBarcode(OptionCodeType optionCodeType, decimal codeLen, string codeData, OptionCenter? optionCenter)
         {
             Do("PrintBarcode", "OptionCodeType", optionCodeType, "CodeLen", codeLen, "CodeData", codeData, "OptionCenter", optionCenter);
         }

         /// <summary>
         /// Print a department report with or without zeroing ('Z' or 'X').
         /// </summary>
         /// <param name="optionZeroing">1 symbol with value: 
         ///  - 'Z' - Zeroing 
         ///  - 'X' - Without zeroing</param>
         public void PrintDepartmentReport(OptionZeroing optionZeroing)
         {
             Do("PrintDepartmentReport", "OptionZeroing", optionZeroing);
         }

         /// <summary>
         /// Program the language of the device
         /// </summary>
         /// <param name="optionLanguage">1 symbol with value: 
         ///  - '0' - Albanian 
         ///  - '1' - Serbian 
         ///  - '2' - English</param>
         public void ProgramLanguage(OptionLanguage optionLanguage)
         {
             Do("ProgramLanguage", "OptionLanguage", optionLanguage);
         }

         /// <summary>
         /// Shows a 20-symbols text in the lower external display line.
         /// </summary>
         /// <param name="text">20 symbols text</param>
         public void DisplayTextLine2(string text)
         {
             Do("DisplayTextLine2", "Text", text);
         }

         /// <summary>
         /// Temporary enable/disable short receipts sending
         /// </summary>
         /// <param name="optionActivationRS">1 symbol with value : 
         /// - '1' - Yes 
         /// - '0' - No</param>
         public void ManageShortReceiptSending(OptionActivationRS optionActivationRS)
         {
             Do("ManageShortReceiptSending", "OptionActivationRS", optionActivationRS);
         }

         /// <summary>
         /// Provides information about the total fiscal counters and last Z- report date and time.
         /// </summary>
         public DailyCountersRes ReadDailyCounters()
         {
             return CreateRes<DailyCountersRes>(Do("ReadDailyCounters"));
         }

         /// <summary>
         /// Program device's WiFi network password where it will connect. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the WiFi password len</param>
         /// <param name="password">Up to 100 symbols for the device's WiFi password</param>
         public void SetWiFi_Password(decimal passLength, string password)
         {
             Do("SetWiFi_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Start Bluetooth test on the device and print out the result
         /// </summary>
         public void StartTest_Bluetooth()
         {
             Do("StartTest_Bluetooth");
         }

         /// <summary>
         /// Print current headers and Fiscal Memory operative header
         /// </summary>
         public void PrintCurrentHeader()
         {
             Do("PrintCurrentHeader");
         }

         /// <summary>
         /// Erase all articles in PLU database.
         /// </summary>
         /// <param name="password">6 symbols for password</param>
         public void EraseAllPLUs(string password)
         {
             Do("EraseAllPLUs", "Password", password);
         }

         /// <summary>
         /// Store the header into fiscal memory.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         public void StoreCurrentHeaderInFM(string password)
         {
             Do("StoreCurrentHeaderInFM", "Password", password);
         }

         /// <summary>
         /// Provides information about the RA and the total number of operations by specified operator.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
         /// number</param>
         public DailyRAbyOperatorRes ReadDailyRAbyOperator(decimal operNum)
         {
             return CreateRes<DailyRAbyOperatorRes>(Do("ReadDailyRAbyOperator", "OperNum", operNum));
         }

         /// <summary>
         /// Start GPRS test on the device and print out the result
         /// </summary>
         public void StartTest_GPRS()
         {
             Do("StartTest_GPRS");
         }

         /// <summary>
         /// Provides the content of the header lines.
         /// </summary>
         /// <param name="optionHeaderLine">1 symbol with value: 
         ///  - '1' - Header 1 
         ///  - '2' - Header 2 
         ///  - '3' - Header 3 
         ///  - '4' - Header 4 
         ///  - '5' - Header 5 
         ///  - '6' - Header 6 
         ///  - '7' - Header 7 
         ///  - '8' - Header 8</param>
         public HeaderRes ReadHeader(OptionHeaderLine optionHeaderLine)
         {
             return CreateRes<HeaderRes>(Do("ReadHeader", "OptionHeaderLine", optionHeaderLine));
         }

         /// <summary>
         /// Register the specified service from the internal FD DB.
         /// </summary>
         /// <param name="optionSign">1 symbol with optional value: 
         /// - '+' - Sale 
         /// - '-'  - Correction 
         /// ServiceNumber 2 symbols for Service number of FD's database in format ##</param>
         /// <param name="serviceNum">ber 2 symbols for Service number of FD's database in format ##</param>
         /// <param name="startTime">in format: 'hh:mm'</param>
         /// <param name="endTime">in format: 'hh:mm'</param>
         /// <param name="duration">1..7 symbols for Duration in seconds</param>
         /// <param name="distance">1..7 symbols for Distance in meters</param>
         /// <param name="initialSUM">Up to 8 symbols for Initial fee</param>
         /// <param name="transportSUM">Up to 8 symbols for Transport sum</param>
         /// <param name="stayMinutes">1..4 symbols for Stay in minutes</param>
         /// <param name="staySUM">Up to 8 symbols for Stay sum</param>
         /// <param name="discAddV">Up to 8 symbols for percentage of 
         /// discount/addition. Use minus sign '-' for discount</param>
         public void SellTaxiService(OptionSign optionSign, decimal serviceNum, DateTime startTime, DateTime endTime, decimal duration, decimal distance, decimal initialSUM, decimal transportSUM, decimal stayMinutes, decimal staySUM, decimal? discAddV)
         {
             Do("SellTaxiService", "OptionSign", optionSign, "ServiceNum", serviceNum, "StartTime", startTime, "EndTime", endTime, "Duration", duration, "Distance", distance, "InitialSUM", initialSUM, "TransportSUM", transportSUM, "StayMinutes", stayMinutes, "StaySUM", staySUM, "DiscAddV", discAddV);
         }

         /// <summary>
         /// Start paper cutter. The command works only in fiscal printer devices.
         /// </summary>
         public void CutPaper()
         {
             Do("CutPaper");
         }

         /// <summary>
         /// Provide an information about modules supported by device's firmware.
         /// </summary>
         public DeviceModuleSupportByFirmwareRes ReadDeviceModuleSupportByFirmware()
         {
             return CreateRes<DeviceModuleSupportByFirmwareRes>(Do("ReadDeviceModuleSupportByFirmware"));
         }

         /// <summary>
         /// Read device's connected WiFi network password
         /// </summary>
         public WiFi_PasswordRes ReadWiFi_Password()
         {
             return CreateRes<WiFi_PasswordRes>(Do("ReadWiFi_Password"));
         }

         /// <summary>
         /// Program the Barcode number for a certain article (item) from the internal database.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         /// <param name="barcode">13 symbols for barcode</param>
         public void ProgPLUbarcode(decimal pLUNum, string barcode)
         {
             Do("ProgPLUbarcode", "PLUNum", pLUNum, "Barcode", barcode);
         }

         /// <summary>
         /// Prints a detailed FM report by initial and end date.
         /// </summary>
         /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
         public void PrintDetailedFMReportByDate(DateTime startDate, DateTime endDate)
         {
             Do("PrintDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
         }

         /// <summary>
         /// Store a brief FM report by initial and end FM report number.
         /// </summary>
         /// <param name="startNum">4 symbols for the initial report number included in report, format ####</param>
         /// <param name="endNum">4 symbols for the final report number included in report, format ####</param>
         public void ReadBriefFMReportByNum(decimal startNum, decimal endNum)
         {
             Do("ReadBriefFMReportByNum", "StartNum", startNum, "EndNum", endNum);
         }

         /// <summary>
         /// Read the number of symbols per line.
         /// </summary>
         public decimal ReadSymbolsPerLine()
         {
             return CreateRes<decimal>(Do("ReadSymbolsPerLine"));
         }

         /// <summary>
         /// Provides information about the general registers of the specified.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
         public PLUgeneralRes ReadPLUgeneral(decimal pLUNum)
         {
             return CreateRes<PLUgeneralRes>(Do("ReadPLUgeneral", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Read the amounts received from sales by type of payment and specified operator.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
         /// number</param>
         public DailyReceivedSalesAmountsByOperatorRes ReadDailyReceivedSalesAmountsByOperator(decimal operNum)
         {
             return CreateRes<DailyReceivedSalesAmountsByOperatorRes>(Do("ReadDailyReceivedSalesAmountsByOperator", "OperNum", operNum));
         }

         /// <summary>
         /// Closes the non-fiscal receipt.
         /// </summary>
         public void CloseNonFiscReceipt()
         {
             Do("CloseNonFiscReceipt");
         }

         /// <summary>
         /// Print a brief FM report by initial and end FM report number.
         /// </summary>
         /// <param name="startNum">4 symbols for the initial FM report number included in report, format ####</param>
         /// <param name="endNum">4 symbols for the final FM report number included in report, format ####</param>
         public void PrintBriefFMReportByNum(decimal startNum, decimal endNum)
         {
             Do("PrintBriefFMReportByNum", "StartNum", startNum, "EndNum", endNum);
         }

         /// <summary>
         /// Read Electronic Journal report with all documents.
         /// </summary>
         public void ReadEJ()
         {
             Do("ReadEJ");
         }

         /// <summary>
         /// Registers the payment in the receipt with specified type of payment and amount received.
         /// </summary>
         /// <param name="optionPaymentType">1 symbol with values  
         ///  - '0' - Cash 
         ///  - '1' - Card  
         ///  - '2' - Voucher  
         ///  - '3' - Credit 
         ///  - '4' - Currency</param>
         /// <param name="optionChange">Default value is 0, 1 symbol with value: 
         ///  - '0 - With Change 
         ///  - '1' - Without Change</param>
         /// <param name="amount">Up to 10 characters for received amount</param>
         /// <param name="optionChangeType">1 symbols with value: 
         ///  - '0' - Change In Cash 
         ///  - '1' - Same As The payment 
         ///  - '2' - Change In Currency</param>
         public void Payment(OptionPaymentType optionPaymentType, OptionChange optionChange, decimal amount, OptionChangeType? optionChangeType)
         {
             Do("Payment", "OptionPaymentType", optionPaymentType, "OptionChange", optionChange, "Amount", amount, "OptionChangeType", optionChangeType);
         }

         /// <summary>
         /// Set data for the state department number and name
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         /// <param name="name">23 characters department name</param>
         public void ProgDepartmentName(decimal number, string name)
         {
             Do("ProgDepartmentName", "Number", number, "Name", name);
         }

         /// <summary>
         /// Program device's network IP address, subnet mask, gateway address, DNS address. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="optionAddressType">1 symbol with value: 
         ///  - '2' - IP address 
         ///  - '3' - Subnet Mask 
         ///  - '4' - Gateway address 
         ///  - '5' - DNS address</param>
         /// <param name="deviceAddress">15 symbols for the selected address</param>
         public void SetDeviceTCP_Addresses(OptionAddressType optionAddressType, string deviceAddress)
         {
             Do("SetDeviceTCP_Addresses", "OptionAddressType", optionAddressType, "DeviceAddress", deviceAddress);
         }

         /// <summary>
         /// Read date and number of last Z-report and last RAM reset event.
         /// </summary>
         public LastDailyReportInfoRes ReadLastDailyReportInfo()
         {
             return CreateRes<LastDailyReportInfoRes>(Do("ReadLastDailyReportInfo"));
         }

         /// <summary>
         /// Provides information about sending of Z report to server automatically after Z report or not.
         /// </summary>
         public OptionSendAfterZ ReadECRprofileZreportSending()
         {
             return CreateRes<OptionSendAfterZ>(Do("ReadECRprofileZreportSending"));
         }

         /// <summary>
         /// Print a free text. The command can be executed only if receipt is opened (Fiscal receipt or Non-fical receipt). In the beginning and in the end of line symbol '#' is printed.
         /// </summary>
         /// <param name="text">TextLength-2 symbols</param>
         public void PrintText(string text)
         {
             Do("PrintText", "Text", text);
         }

         /// <summary>
         /// Prints an operator's report for a specified operator (0 = all operators) with or without zeroing ('Z' or 'X'). When a 'Z' value is specified the report should include all operators.
         /// </summary>
         /// <param name="optionZeroing">with following values: 
         ///  - 'Z' - Zeroing 
         ///  - 'X' - Without zeroing</param>
         /// <param name="number">Symbols from 0 to 20corresponding to operator's number 
         /// ,0 for all operators</param>
         public void PrintOperatorReport(OptionZeroing optionZeroing, decimal number)
         {
             Do("PrintOperatorReport", "OptionZeroing", optionZeroing, "Number", number);
         }

         /// <summary>
         /// Provides detailed 7-byte information about the current status of the fiscal device.
         /// </summary>
         public StatusRes ReadStatus()
         {
             return CreateRes<StatusRes>(Do("ReadStatus"));
         }

         /// <summary>
         /// Read data for the state department number and name
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         public DepartmentNameRes ReadDepartmentName(decimal number)
         {
             return CreateRes<DepartmentNameRes>(Do("ReadDepartmentName", "Number", number));
         }

         /// <summary>
         /// Opens a fiscal receipt assigned to the specified operator
         /// </summary>
         /// <param name="operNum">Symbol from 1 to 20 corresponding to operator's number</param>
         /// <param name="operPass">6 symbols for operator's password</param>
         /// <param name="optionPrintType">1 symbol with value 
         ///  - '0' - Step by step printing 
         ///  - '2' - Postponed printing</param>
         public void OpenReceipt(decimal operNum, string operPass, OptionPrintType optionPrintType)
         {
             Do("OpenReceipt", "OperNum", operNum, "OperPass", operPass, "OptionPrintType", optionPrintType);
         }

         /// <summary>
         /// Sets the date and time and prints out the current values.
         /// </summary>
         /// <param name="dateTime">Date Time parameter in format: DD-MM-YY HH:MM:SS</param>
         public void SetDateTime(DateTime dateTime)
         {
             Do("SetDateTime", "DateTime", dateTime);
         }

         /// <summary>
         /// Stores a block containing the number format into the fiscal memory. Print the current status on the printer.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         /// <param name="optionDecimalPointPosition">1 symbol with values: 
         ///  - '0'- Whole numbers 
         ///  - '2' - Fractions</param>
         public void ProgDecimalPointPosition(string password, OptionDecimalPointPosition optionDecimalPointPosition)
         {
             Do("ProgDecimalPointPosition", "Password", password, "OptionDecimalPointPosition", optionDecimalPointPosition);
         }

         /// <summary>
         /// Provides information about the total fiscal accumulative sums from sales
         /// </summary>
         public TotalFiscalSumsRes ReadTotalFiscalSums()
         {
             return CreateRes<TotalFiscalSumsRes>(Do("ReadTotalFiscalSums"));
         }

         /// <summary>
         /// Provides information about the price and price type of the specified article.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
         public PLUpriceRes ReadPLUprice(decimal pLUNum)
         {
             return CreateRes<PLUpriceRes>(Do("ReadPLUprice", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Read information about the amounts returned
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's 
         /// number</param>
         public DailyReturnedAmountsRes ReadDailyReturnedAmounts(decimal operNum)
         {
             return CreateRes<DailyReturnedAmountsRes>(Do("ReadDailyReturnedAmounts", "OperNum", operNum));
         }

         /// <summary>
         /// Provides information about an operator's name and password.
         /// </summary>
         /// <param name="number">Symbol from 1 to 20 corresponding to the number of operator</param>
         public OperatorNamePasswordRes ReadOperatorNamePassword(decimal number)
         {
             return CreateRes<OperatorNamePasswordRes>(Do("ReadOperatorNamePassword", "Number", number));
         }

         /// <summary>
         /// Read the last operator's report number and date and time.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to 
         /// operator's number</param>
         public DailyCountersByOperatorRes ReadDailyCountersByOperator(decimal operNum)
         {
             return CreateRes<DailyCountersByOperatorRes>(Do("ReadDailyCountersByOperator", "OperNum", operNum));
         }

         /// <summary>
         /// Provides information about all programmed payment types.
         /// </summary>
         public PaymentsRes ReadPayments()
         {
             return CreateRes<PaymentsRes>(Do("ReadPayments"));
         }

         /// <summary>
         /// Program the name of the payment types.
         /// </summary>
         /// <param name="optionPaymentNum">1 symbol for payment type: 
         ///  - '0' - Payment 0 
         ///  - '1' - Payment 1 
         ///  - '2' - Payment 2 
         ///  - '3' - Payment 3 
         ///  - '4' - Payment 4</param>
         /// <param name="name">10 symbols for payment type name</param>
         /// <param name="rate">10 symbols for exchange rate in format: ####.#####  
         /// of the 5
         /// th
         ///  payment type.</param>
         public void ProgPayment(OptionPaymentNum optionPaymentNum, string name, decimal? rate)
         {
             Do("ProgPayment", "OptionPaymentNum", optionPaymentNum, "Name", name, "Rate", rate);
         }

         /// <summary>
         /// Prints out a diagnostic receipt.
         /// </summary>
         public void PrintDiagnostics()
         {
             Do("PrintDiagnostics");
         }

         /// <summary>
         /// Program the contents of a footer lines.
         /// </summary>
         /// <param name="optionFooterLine">2 symbol with value: 
         /// -'F1' - Footer 1 
         /// -'F2' - Footer 2 
         /// -'F3' - Footer 3</param>
         /// <param name="footerText">TextLength symbols for footer line</param>
         public void ProgFooter(OptionFooterLine optionFooterLine, string footerText)
         {
             Do("ProgFooter", "OptionFooterLine", optionFooterLine, "FooterText", footerText);
         }

         /// <summary>
         /// Print a copy of the last receipt document issued
         /// </summary>
         public void PrintLastReceiptDuplicate()
         {
             Do("PrintLastReceiptDuplicate");
         }

         /// <summary>
         /// Program device's GPRS password. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="passLength">Up to 3 symbols for the GPRS password len</param>
         /// <param name="password">Up to 100 symbols for the device's GPRS password</param>
         public void SetGPRS_Password(decimal passLength, string password)
         {
             Do("SetGPRS_Password", "PassLength", passLength, "Password", password);
         }

         /// <summary>
         /// Restore default parameters of the device.
         /// </summary>
         /// <param name="password">6-symbols string</param>
         public void SoftwareReset(string password)
         {
             Do("SoftwareReset", "Password", password);
         }

         /// <summary>
         /// Provides information about device's TCP password.
         /// </summary>
         public TCP_PasswordRes ReadTCP_Password()
         {
             return CreateRes<TCP_PasswordRes>(Do("ReadTCP_Password"));
         }

         /// <summary>
         /// Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.
         /// </summary>
         /// <param name="password">6 symbols string</param>
         /// <param name="vATrateC">Value of VAT rate C from 6 symbols in format ##.##</param>
         /// <param name="vATrateD">Value of VAT rate D from 6 symbols in format ##.##</param>
         /// <param name="vATrateE">Value of VAT rate E from 6 symbols in format ##.##</param>
         /// <param name="vATrateF">Value of VAT rate F from 6 symbols in format ##.##</param>
         /// <param name="vATrateG">Value of VAT rate G from 6 symbols in format ##.##</param>
         /// <param name="vATrateH">Value of VAT rate H from 6 symbols in format ##.##</param>
         public void ProgVATrates(string password, decimal vATrateC, decimal vATrateD, decimal vATrateE, decimal vATrateF, decimal vATrateG, decimal vATrateH)
         {
             Do("ProgVATrates", "Password", password, "VATrateC", vATrateC, "VATrateD", vATrateD, "VATrateE", vATrateE, "VATrateF", vATrateF, "VATrateG", vATrateG, "VATrateH", vATrateH);
         }

         /// <summary>
         /// Program device's Bluetooth module to be enabled or disabled.
         /// </summary>
         /// <param name="optionBTstatus">1 symbol with value: 
         ///  - '0' - Disabled 
         ///  - '1' - Enabled</param>
         public void SetBluetooth_Status(OptionBTstatus optionBTstatus)
         {
             Do("SetBluetooth_Status", "OptionBTstatus", optionBTstatus);
         }

         /// <summary>
         /// Read Electronic Journal Report from Report initial date to report Final date.
         /// </summary>
         /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
         public void ReadEJByDate(DateTime startRepFromDate, DateTime endRepFromDate)
         {
             Do("ReadEJByDate", "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
         }

         /// <summary>
         /// Provides information about the barcode of the specified article.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number with leading zeroes in format: #####</param>
         public PLUbarcodeRes ReadPLUbarcode(decimal pLUNum)
         {
             return CreateRes<PLUbarcodeRes>(Do("ReadPLUbarcode", "PLUNum", pLUNum));
         }

         /// <summary>
         /// Provides information about the ECR's password
         /// </summary>
         public ServerPasswordECRSRes ReadServerPasswordECRS()
         {
             return CreateRes<ServerPasswordECRSRes>(Do("ReadServerPasswordECRS"));
         }

         /// <summary>
         /// Set data for the state department number from the internal FD database.
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         /// <param name="name">23 characters department name</param>
         /// <param name="optionVATClass">1 character for article VAT Class: 
         ///  - 'A' - VAT Class A 
         ///  - 'B' - VAT Class B 
         ///  - 'C' - VAT Class C 
         ///  - 'D' - VAT Class D 
         ///  - 'E' - VAT Class E 
         ///  - 'F' - VAT Class F 
         ///  - 'G' - VAT Class G 
         ///  - 'H' - VAT Class H</param>
         /// <param name="price">Up to 10 symbols for department price</param>
         /// <param name="flagsPrice">1 symbol with value: 
         /// Flags.7=1 
         /// Flags.6=0 
         /// Flags.5=0 
         /// Flags.4=0 
         /// Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
         /// Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
         /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
         /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</param>
         public void ProgDepartment(decimal number, string name, OptionVATClass optionVATClass, decimal price, byte flagsPrice)
         {
             Do("ProgDepartment", "Number", number, "Name", name, "OptionVATClass", optionVATClass, "Price", price, "FlagsPrice", flagsPrice);
         }

         /// <summary>
         /// Print or store Electronic Journal Report from by number of Z report blocks.
         /// </summary>
         /// <param name="startZNum">4 symbols for initial number report in format ####</param>
         /// <param name="endZNum">4 symbols for final number report in format ####</param>
         public void PrintEJByZBlocks(decimal startZNum, decimal endZNum)
         {
             Do("PrintEJByZBlocks", "StartZNum", startZNum, "EndZNum", endZNum);
         }

         /// <summary>
         /// Sets device's idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - 4Eh / N - Save network settings
         /// </summary>
         /// <param name="idleTimeout">4 symbols for Idle timeout in format ####</param>
         public void SetIdle_Timeout(decimal idleTimeout)
         {
             Do("SetIdle_Timeout", "IdleTimeout", idleTimeout);
         }

         /// <summary>
         /// Read device TCP Auto Start status
         /// </summary>
         public OptionTCPAutoStart ReadTCP_AutoStartStatus()
         {
             return CreateRes<OptionTCPAutoStart>(Do("ReadTCP_AutoStartStatus"));
         }

         /// <summary>
         /// Program the language of the device
         /// </summary>
         /// <param name="optionLanguage">1 symbol with value: 
         ///  - '0' - Albanian 
         ///  - '1' - Serbian 
         ///  - '2' - English</param>
         public void ProgramTempLanguage(OptionLanguage optionLanguage)
         {
             Do("ProgramTempLanguage", "OptionLanguage", optionLanguage);
         }

         /// <summary>
         /// Prints the programmed graphical logo with the stated number.
         /// </summary>
         /// <param name="number">Number of logo to be printed. If missing prints logo with number 0</param>
         public void PrintLogo(decimal number)
         {
             Do("PrintLogo", "Number", number);
         }

         /// <summary>
         /// Printing Electronic Journal Report from Report initial date to report Final date.
         /// </summary>
         /// <param name="startRepFromDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endRepFromDate">6 symbols for final date in the DDMMYY format</param>
         public void PrintEJByDate(DateTime startRepFromDate, DateTime endRepFromDate)
         {
             Do("PrintEJByDate", "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
         }

         /// <summary>
         /// Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.
         /// </summary>
         /// <param name="operNum">Symbols from 1 to 20 corresponding to operator's number</param>
         public DailyGeneralRegistersByOperatorRes ReadDailyGeneralRegistersByOperator(decimal operNum)
         {
             return CreateRes<DailyGeneralRegistersByOperatorRes>(Do("ReadDailyGeneralRegistersByOperator", "OperNum", operNum));
         }

         /// <summary>
         /// Provides information about device's GPRS password.
         /// </summary>
         public GPRS_PasswordRes ReadGPRS_Password()
         {
             return CreateRes<GPRS_PasswordRes>(Do("ReadGPRS_Password"));
         }

         /// <summary>
         /// Depending on the parameter prints:  âˆ’ daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print ('Z'); âˆ’ daily fiscal report without zeroing ('X');
         /// </summary>
         /// <param name="optionZeroing">1 character with following values: 
         ///  - 'Z' - Zeroing 
         ///  - 'X' - Without zeroing</param>
         public void PrintDailyReport(OptionZeroing optionZeroing)
         {
             Do("PrintDailyReport", "OptionZeroing", optionZeroing);
         }

         /// <summary>
         /// Close the taxi fiscal receipt.
         /// </summary>
         /// <param name="tAXIcount">Symbols from 1 to 16 corresponding to taxi counter</param>
         public void CloseTaxiReceipt(decimal tAXIcount)
         {
             Do("CloseTaxiReceipt", "TAXIcount", tAXIcount);
         }

         /// <summary>
         /// Programs the external display.
         /// </summary>
         /// <param name="password">A 6-symbol string</param>
         public void ProgExtDisplay(string password)
         {
             Do("ProgExtDisplay", "Password", password);
         }

         /// <summary>
         /// Provides the content of the footer lines.
         /// </summary>
         /// <param name="optionFooterLine">1 symbol with value: 
         ///  - 'F1' - Footer 1 
         ///  - 'F2' - Footer 2 
         ///  - 'F3' - Footer 3</param>
         public FooterRes ReadFooter(OptionFooterLine optionFooterLine)
         {
             return CreateRes<FooterRes>(Do("ReadFooter", "OptionFooterLine", optionFooterLine));
         }

         /// <summary>
         /// Paying the exact amount in cash and close the fiscal receipt.
         /// </summary>
         /// <param name="tAXIcount">Symbols from 1 to 16 corresponding to taxi counter</param>
         public void CashPayCloseTaxiReceipt(decimal tAXIcount)
         {
             Do("CashPayCloseTaxiReceipt", "TAXIcount", tAXIcount);
         }

         /// <summary>
         /// Print or store Electronic Journal Report from by number of Z report blocks of current receipt.
         /// </summary>
         /// <param name="startZNum">4 symbols for initial number report in format ####</param>
         /// <param name="endZNum">4 symbols for final number report in format ####</param>
         public void PrintEJByZBlocksWithoutReceipts(decimal startZNum, decimal endZNum)
         {
             Do("PrintEJByZBlocksWithoutReceipts", "StartZNum", startZNum, "EndZNum", endZNum);
         }

         /// <summary>
         /// Opens a non-fiscal receipt assigned to the specified operator
         /// </summary>
         /// <param name="operNum">Symbols from '1' to '20' corresponding to operator's number</param>
         /// <param name="operPass">4 symbols for operator's password</param>
         public void OpenNonFiscalReceipt(decimal operNum, string operPass)
         {
             Do("OpenNonFiscalReceipt", "OperNum", operNum, "OperPass", operPass);
         }

         /// <summary>
         /// Provides information about active profile date - date from which the account is valid or date from which we return to account 1 in case of mReset.
         /// </summary>
         public DateTime ReadECRprofileActiveDate()
         {
             return CreateRes<DateTime>(Do("ReadECRprofileActiveDate"));
         }

         /// <summary>
         /// Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.
         /// </summary>
         /// <param name="optionPrinting">1 symbol with value: 
         ///  - '1' - Yes 
         ///  - '0' - No</param>
         /// <param name="optionDisplay">1 symbol with value: 
         ///  - '1' - Yes 
         ///  - '0' - No</param>
         /// <param name="discAddV">Up to 8 symbols for the value of the 
         /// discount/addition. Use minus sign '-' for discount</param>
         /// <param name="discAddP">Up to 7 symbols for the percentage value of the 
         /// discount/addition. Use minus sign '-' for discount</param>
         public decimal Subtotal(OptionPrinting optionPrinting, OptionDisplay optionDisplay, decimal? discAddV, decimal? discAddP)
         {
             return CreateRes<decimal>(Do("Subtotal", "OptionPrinting", optionPrinting, "OptionDisplay", optionDisplay, "DiscAddV", discAddV, "DiscAddP", discAddP));
         }

         /// <summary>
         /// Provides information about the RA amounts by type of payment and the total number of operations.
         /// </summary>
         public DailyRARes ReadDailyRA()
         {
             return CreateRes<DailyRARes>(Do("ReadDailyRA"));
         }

         /// <summary>
         /// Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.
         /// </summary>
         public GeneralDailyRegistersRes ReadGeneralDailyRegisters()
         {
             return CreateRes<GeneralDailyRegistersRes>(Do("ReadGeneralDailyRegisters"));
         }

         /// <summary>
         /// Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.
         /// </summary>
         /// <param name="logoNumber">1 character value from '0' to '9' or '?'. The number sets the active logo 
         /// number, and the '?' invokes only printing of information</param>
         public void SetActiveLogo(string logoNumber)
         {
             Do("SetActiveLogo", "LogoNumber", logoNumber);
         }

         /// <summary>
         /// Provide information about the display greeting message.
         /// </summary>
         public string ReadDisplayGreetingMessage()
         {
             return CreateRes<string>(Do("ReadDisplayGreetingMessage"));
         }

         /// <summary>
         /// Program ECRS password
         /// </summary>
         /// <param name="paramLength">Up to 2 symbols for parameter length</param>
         /// <param name="serverPassword">Up to 64 symbols for server password</param>
         public void SetServerPasswordECRS(decimal paramLength, string serverPassword)
         {
             Do("SetServerPasswordECRS", "ParamLength", paramLength, "ServerPassword", serverPassword);
         }

         /// <summary>
         /// Select type of display
         /// </summary>
         public OptionExternalType ReadExternalDisplay()
         {
             return CreateRes<OptionExternalType>(Do("ReadExternalDisplay"));
         }

         /// <summary>
         /// Providing information about if the device's Bluetooth module is enabled or disabled.
         /// </summary>
         public OptionBTstatus ReadBluetooth_Status()
         {
             return CreateRes<OptionBTstatus>(Do("ReadBluetooth_Status"));
         }

         /// <summary>
         /// Program device's GPRS user name. To apply use - SaveNetworkSettings()
         /// </summary>
         /// <param name="gPRS_Username_Len">Up to 3 symbols for the username len</param>
         /// <param name="username">Up to 100 symbols for the device's GPRS username</param>
         public void SetGPRS_Username(decimal gPRS_Username_Len, string username)
         {
             Do("SetGPRS_Username", "GPRS_Username_Len", gPRS_Username_Len, "Username", username);
         }

         /// <summary>
         /// Provides information about the general registers of the specified.
         /// </summary>
         /// <param name="serviceNum">2 symbols for service number: ##</param>
         public TaxiServiceGeneralRes ReadTaxiServiceGeneral(decimal serviceNum)
         {
             return CreateRes<TaxiServiceGeneralRes>(Do("ReadTaxiServiceGeneral", "ServiceNum", serviceNum));
         }

         /// <summary>
         /// Program the price for a certain article and specific name.
         /// </summary>
         /// <param name="pLUNum">5 symbols for article number in format: #####</param>
         /// <param name="pLUNameAlbanian">32 symbols for Albanian PLU</param>
         /// <param name="pLUNameSerbian">32 symbols for Serbian PLU</param>
         /// <param name="pLUNameEnglish">32 symbols for English PLU</param>
         public void ProgPLUNameDifferent(decimal pLUNum, string pLUNameAlbanian, string pLUNameSerbian, string pLUNameEnglish)
         {
             Do("ProgPLUNameDifferent", "PLUNum", pLUNum, "PLUNameAlbanian", pLUNameAlbanian, "PLUNameSerbian", pLUNameSerbian, "PLUNameEnglish", pLUNameEnglish);
         }

         /// <summary>
         /// Provide an information about modules supported by the device.
         /// </summary>
         public DeviceModuleSupportRes ReadDeviceModuleSupport()
         {
             return CreateRes<DeviceModuleSupportRes>(Do("ReadDeviceModuleSupport"));
         }

         /// <summary>
         /// Read device's connected WiFi network name
         /// </summary>
         public WiFi_NetworkNameRes ReadWiFi_NetworkName()
         {
             return CreateRes<WiFi_NetworkNameRes>(Do("ReadWiFi_NetworkName"));
         }

         /// <summary>
         /// Provides information about the programmed number of POS and the current values of the logo, cutting permission, display mode, enable/disable currency in receipt.
         /// </summary>
         public ParametersRes ReadParameters()
         {
             return CreateRes<ParametersRes>(Do("ReadParameters"));
         }

         /// <summary>
         /// Provides information about the device model and version.
         /// </summary>
         public VersionRes ReadVersion()
         {
             return CreateRes<VersionRes>(Do("ReadVersion"));
         }

         /// <summary>
         ///  Writes raw bytes to FP 
         /// </summary>
         /// <param name="bytes">The bytes in BASE64 ecoded string to be written to FP</param>
         public void RawWrite(byte[] bytes)
         {
             Do("RawWrite", "Bytes", bytes);
         }

         /// <summary>
         /// Paying the exact amount in cash and close the fiscal receipt.
         /// </summary>
         public void CashPayCloseReceipt()
         {
             Do("CashPayCloseReceipt");
         }

         /// <summary>
         /// Program the contents of a Display Greeting message.
         /// </summary>
         /// <param name="displayGreetingText">20 symbols for Display greeting message</param>
         public void ProgDisplayGreetingMessage(string displayGreetingText)
         {
             Do("ProgDisplayGreetingMessage", "DisplayGreetingText", displayGreetingText);
         }

         /// <summary>
         /// Provides information about the PO amounts by type of payment and the total number of operations.
         /// </summary>
         public DailyPORes ReadDailyPO()
         {
             return CreateRes<DailyPORes>(Do("ReadDailyPO"));
         }

         /// <summary>
         /// Read data for the state department number from the internal FD database.
         /// </summary>
         /// <param name="number">2 symbols department number in format ##</param>
         public DepartmentOption1Res ReadDepartmentOption1(decimal number)
         {
             return CreateRes<DepartmentOption1Res>(Do("ReadDepartmentOption1", "Number", number));
         }

         /// <summary>
         /// Store a brief FM report by initial and end date.
         /// </summary>
         /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
         public void ReadBriefFMReportByDate(DateTime startDate, DateTime endDate)
         {
             Do("ReadBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
         }

         /// <summary>
         /// Storage a detailed FM report by initial and end date.
         /// </summary>
         /// <param name="startDate">6 symbols for initial date in the DDMMYY format</param>
         /// <param name="endDate">6 symbols for final date in the DDMMYY format</param>
         public void ReadDetailedFMReportByDate(DateTime startDate, DateTime endDate)
         {
             Do("ReadDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
         }

         public void ApplyClientLibraryDefinitions()
         {
             SendDefinitions(XElement.Parse(defs));
         }

#region Defs
         public string defs = @"<Defs>
  <ServerStartupSettings>
    <Encoding CodePage=""1250"" EncodingName=""Central European (Windows)"" />
    <GenerationTimeStamp>2207011537</GenerationTimeStamp>
    <SignalFD>0</SignalFD>
    <SilentFindDevice>0</SilentFindDevice>
    <EM>0</EM>
  </ServerStartupSettings>
  <Command Name=""ReadGPRS_Signal"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GPRS signal.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'S'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""GPRS_Signal"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>(Signal) 3 symbols for the GPRS signal</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'S'><;><GPRS_Signal[3]]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PrintArticleReport"" CmdByte=""0x7E"">
    <FPOperation>Prints an article report with or without zeroing ('Z' or 'X').</FPOperation>
    <Args>
      <Arg Name=""OptionZeroing"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Without zeroing"" Value=""X"" />
          <Option Name=""Zeroing"" Value=""Z"" />
        </Options>
        <Desc>with following values: 
 - 'Z' - Zeroing 
 - 'X' - Without zeroing</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDecimalPoint"" CmdByte=""0x63"">
    <FPOperation>Provides information about the current (the last value stored into the FM) decimal point format.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""OptionDecimalPointPosition"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Fractions"" Value=""2"" />
          <Option Name=""Whole numbers"" Value=""0"" />
        </Options>
        <Desc>1 symbol with values: 
 - '0'- Whole numbers 
 - '2' - Fractions</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<DecimalPointPosition[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgParameters"" CmdByte=""0x45"">
    <FPOperation>Programs the number of POS, printing of logo, cash drawer opening, cutting permission, external display management mode, sending receipts, enable or disable currency in receipt and working operators counter.</FPOperation>
    <Args>
      <Arg Name=""POSNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for number of POS in format ####</Desc>
      </Arg>
      <Arg Name=""OptionPrintLogo"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Arg>
      <Arg Name=""OptionAutoOpenDrawer"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Arg>
      <Arg Name=""OptionAutoCut"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Arg>
      <Arg Name=""OptionExternalDispManagement"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Auto"" Value=""0"" />
          <Option Name=""Manual"" Value=""1"" />
        </Options>
        <Desc>1 symbol of value: 
 - '1' - Manual 
 - '0' - Auto</Desc>
      </Arg>
      <Arg Name=""OptionWorkOperatorCount"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""More"" Value=""0"" />
          <Option Name=""One"" Value=""1"" />
        </Options>
        <Desc>1 symbol of value: 
 - '1' - One 
 - '0' - More</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <POSNum[4]> <;> <PrintLogo[1]> <;> <AutoOpenDrawer[1]> <;> <AutoCut[1]> <;> < ExternalDispManagement[1]> <;> <WorkOperatorCount[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailySaleAmountsByVAT"" CmdByte=""0x6D"">
    <FPOperation>Provides information about the accumulated amount by VAT group.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""SalesAmountVATGr0"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group A</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr1"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group B</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr2"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group C</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr3"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group D</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr4"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group E</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr5"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group F</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr6"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group G</Desc>
      </Res>
      <Res Name=""SalesAmountVATGr7"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>Up to 11 symbols for the sales amount accumulated by VAT group H</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<SalesAmountVATGr0[11]> <;> <SalesAmountVATGr1[11]> <;> <SalesAmountVATGr2[11]> <;> <SalesAmountVATGr3[1]> <;><SalesAmountVATGr4[11]> <;> <SalesAmountVATGr5[11]> <;> <SalesAmountVATGr6[11]> <;> <SalesAmountVATGr7[1]> <;>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""StartTest_Lan"" CmdByte=""0x4E"">
    <FPOperation>Start LAN test on the device and print out the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'T'> <;> <'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDepartment"" CmdByte=""0x67"">
    <FPOperation>Provides information for the programmed data, the turnover from the stated department number</FPOperation>
    <Args>
      <Arg Name=""DepNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols for deparment number in format: ##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <DepNum[2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""DepNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols for department number in format ##</Desc>
      </Res>
      <Res Name=""DepName"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>34 symbols for department name</Desc>
      </Res>
      <Res Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for VAT class attachment of the department: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Res>
      <Res Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>1..11 symbols for Department price</Desc>
      </Res>
      <Res Name=""FlagsPrice"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>(Setting price, single transaction, type of goods) 1 symbol with value: 
Flags.7=1 
Flags.6=0 
Flags.5=0 
Flags.4=0 
Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Res>
      <Res Name=""Turnover"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated turnover of the department</Desc>
      </Res>
      <Res Name=""SoldQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for sold quantity of the department</Desc>
      </Res>
      <Res Name=""RefundAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated refund amount of the department</Desc>
      </Res>
      <Res Name=""RefundQTY"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated refund quantity of department</Desc>
      </Res>
      <Res Name=""LastZReportNumber"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>Up to 5 symbols for the number of last Z report in format #####</Desc>
      </Res>
      <Res Name=""LastZReportDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>16 symbols for the date and hour in last Z report</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<DepNum[2]> <;> <DepName[32]> <;> <OptionVATClass[1]> <;> <Price[1..11]> <;> <FlagsPrice[1]> <;> <Turnover[1..11]> <;> <SoldQuantity[1..11]> <;> <RefundAmount[1..11]> <;> <RefundQTY[1..11]> <;> <LastZReportNumber[1..5]> <;> <LastZReportDate""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadLastReceiptNum"" CmdByte=""0x71"">
    <FPOperation>Provides information about the number of the last issued receipt.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""LastReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000 for the number of last issued fiscal receipt"">
        <Desc>Up to 4 symbols in format #### for the number of last issued fiscal receipt</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<LastReceiptNum[1..4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPLUgeneral"" CmdByte=""0x4B"">
    <FPOperation>Programs the general data for a certain article in the internal FD database. The price may have variable length, while the name field is fixed.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Text"" MaxLen=""5"">
        <Desc>5 symbols for article number</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PLUName"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for article name</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>1 to 10 symbols for article price</Desc>
      </Arg>
      <Arg Name=""FlagsPriceQty"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>1 symbols with value: 
Flags.7=1 
Flags.6=0 
Flags.5=1 Yes, Flags.5=0 No (Fractional quantity disabled) 
Flags.4=1 Yes, Flags.4=0 No (Single Transaction) 
Flags.3=1 Yes, Flags.3=0 No (Allow negative quantity) 
Flags.2=1 Yes, Flags.2=0 No (Monitoring quantity in stock) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <Arg Name=""BelongToDepNum"" Value="""" Type=""Decimal_plus_80h"" MaxLen=""2"">
        <Desc>BelongToDepNum + 80h, 1 symbol for article 
department attachment, formed in the following manner: 
BelongToDepNum[HEX] + 80h example: Dep01 = 81h, Dep02 = 82h â€¦ 
Dep19 = 93h</Desc>
      </Arg>
      <Arg Name=""AvailableQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for quantity in stock</Desc>
      </Arg>
      <Arg Name=""Barcode"" Value="""" Type=""Text"" MaxLen=""13"">
        <Desc>13 symbols for barcode</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]> <;> <Option['1']> <;> <PLUName[32]> <;> <Price[1..10]> <;> <FlagsPriceQty[1]> <;> < OptionVATClass[1] ><;><BelongToDepNum[1..2]> <;> <AvailableQuantity[1..11]> <;> <Barcode[13]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgSymbolsPerLine"" CmdByte=""0x4F"">
    <FPOperation>Program the number of symbols per line.</FPOperation>
    <Args>
      <Arg Name=""Option1"" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Option2"" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for password</Desc>
      </Arg>
      <Arg Name=""OptionLineSymbols"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Symbols per line 32"" Value=""0"" />
          <Option Name=""Symbols per line 48"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Symbols per line 32 
 - '1' - Symbols per line 48</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option1['P']> <;><Option2['W']><;> <Password[6]> <;> <LineSymbols[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintEJ"" CmdByte=""0x7C"">
    <FPOperation>Print or store Electronic Journal report with all documents.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J1"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""*"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'J1'> <;> <'*'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadUsedComModule"" CmdByte=""0x4E"">
    <FPOperation>Provides information about the communication module, used for talking with the server</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'S'> <;> <'E'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionCommunicationModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""GSM"" Value=""0"" />
          <Option Name=""LAN"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - GSM 
 - '1' - LAN</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'S'> <;> <'E'> <;> <CommunicationModule[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""RestorePreviousHeader"" CmdByte=""0x53"">
    <FPOperation>Restore previous header if current header is not saved into fiscal memory.</FPOperation>
    <Args>
      <Arg Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'0'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""CashDrawerOpen"" CmdByte=""0x2A"">
    <FPOperation>Opens the cash drawer.</FPOperation>
  </Command>
  <Command Name=""SetTCPpassword"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP password. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the TCP password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'Z'> <;> <'1'> <;> <PassLength[1..3]> <;> <Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DisplayTextLines1and2"" CmdByte=""0x27"">
    <FPOperation>Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""40"">
        <Desc>40 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[40]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SellPLUFromFD_DB"" CmdByte=""0x32"">
    <FPOperation>Register the sell with specified quantity of article from the internal FD database.</FPOperation>
    <Args>
      <Arg Name=""OptionSign"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Correction"" Value=""-"" />
          <Option Name=""Sale"" Value=""+"" />
        </Options>
        <Desc>1 symbol with optional value: 
 - '+' -Sale 
 - '-' - Correction</Desc>
        <Meta MinLen=""1"" Compulsory=""true"" NoSemiColumnSeparatorAfterIt=""true"" />
      </Arg>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for PLU number of FD's database in format #####</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 10 symbols for sale price</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""$"" />
      </Arg>
      <Arg Name=""Quantity"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's quantity sold</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>Up to 7 for percentage of discount/addition. Use minus 
sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbolsfor percentage of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionSign[1]> <PLUNum[5]> {<'$'> <Price[1..8]>} {<'*'> <Quantity[1..10]>} {<','> <DiscAddP[1..7]>} {<':'> <DiscAddV[1..8]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTempLanguage"" CmdByte=""0x4F"">
    <FPOperation>Read temporary header language</FPOperation>
    <Args>
      <Arg Name="""" Value=""l"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'l'> <;> <'R'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""l"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLanguage"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Albanian"" Value=""0"" />
          <Option Name=""English"" Value=""2"" />
          <Option Name=""Serbian"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Albanian 
 - '1' - Serbian 
 - '2' - English</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'l'> <;> <'R'> <;> < Language [1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyReturned"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the amounts returned as sales change.</FPOperation>
    <Args>
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'6'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales change by cash</Desc>
      </Res>
      <Res Name=""AmountPaymentOthers"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales change by 
others payment</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'6'> <;> <AmountPayment[1..11]> <;> <AmountPaymentOthers[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDateTime"" CmdByte=""0x68"">
    <FPOperation>Provides information about the current date and time.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Date Time parameter in format: DD-MM-YY [Space] HH:MM</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<DateTime ""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PayExactSum"" CmdByte=""0x35"">
    <FPOperation>Register the payment in the receipt with specified type of payment and exact amount received.</FPOperation>
    <Args>
      <Arg Name=""OptionPaymentType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Card"" Value=""1"" />
          <Option Name=""Cash"" Value=""0"" />
          <Option Name=""Credit"" Value=""3"" />
          <Option Name=""Currency"" Value=""4"" />
          <Option Name=""Voucher"" Value=""2"" />
        </Options>
        <Desc>1 symbol with values  
 - '0' - Cash 
 - '1' - Card  
 - '2' - Voucher  
 - '3' - Credit 
 - '4' - Currency</Desc>
      </Arg>
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""&quot;"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PaymentType[1]> <;> <reserved['0']> <;><reserved['""']> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""StartTest_WiFi"" CmdByte=""0x4E"">
    <FPOperation>Start WiFi test on the device and print out the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'W'> <;> <'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDeviceMAC_Address"" CmdByte=""0x4E"">
    <FPOperation>Provides information about TCP device MAC address</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""DeviceMAC"" Value="""" Type=""Text"" MaxLen=""12"">
        <Desc>12 symbols for device MAC</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'T'> <;> <'6'> <;> <DeviceMAC[12]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadFMfreeRecords"" CmdByte=""0x74"">
    <FPOperation>Read the number of the remaining free records for Z-report in the Fiscal Memory and check sum, resets, header, tax, sd card and registration changes of FM MCU flash memory.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""FreeFMrecords"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbols for the number of free records for Z-report in the FM 
CS 4 symbols for FM MCU flash checksum</Desc>
      </Res>
      <Res Name=""CS"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbols for FM MCU flash checksum</Desc>
      </Res>
      <Res Name=""FreeResets"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for resets in FM</Desc>
      </Res>
      <Res Name=""FreeHeaderChanges"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Up to 2 symbols for headers changes in FM</Desc>
      </Res>
      <Res Name=""FreeTaxChanges"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Up to 2 symbols for tax changes in FM</Desc>
      </Res>
      <Res Name=""FreeSDchanges"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Up to 2 symbols for SD changes in FM</Desc>
      </Res>
      <Res Name=""FreeRegistrationChanges"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for registration changes in FM</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<FreeFMrecords[4]><;><CS[4]><;><FreeResets[1..3]> <;><FreeHeaderChanges[1..2]><;><FreeTaxChanges[1..2]><;><FreeSDchanges[1..2]> <;><FreeRegistrationChanges[1..3] >]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadBluetooth_Password"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's Bluetooth password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'B'> <;> <'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the BT password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the BT password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'B'> <;> <'P'> <;> <PassLength[1..3]> <;> <Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadEJFromReceiptToReceipt"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal Report from receipt number to receipt number.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J0"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""000000"">
        <Desc>6 symbols for initial receipt number included in report in format ######</Desc>
      </Arg>
      <Arg Name=""EndReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""000000"">
        <Desc>6 symbols for final receipt number included in report in format ######</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<'J0'><;><'N'><;><StartReceiptNum[6]><;><EndReceiptNum[6]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""SellPLUfromDep"" CmdByte=""0x34"">
    <FPOperation>Register the sell of department.</FPOperation>
    <Args>
      <Arg Name=""NamePLU"" Value="""" Type=""Text"" MaxLen=""36"">
        <Desc>36 symbols for name of sale. 34 symbols are printed on paper.</Desc>
      </Arg>
      <Arg Name=""DepNum"" Value="""" Type=""Decimal_plus_80h"" MaxLen=""2"">
        <Desc>1 symbol for article department 
attachment, formed in the following manner: DepNum[HEX] + 80h example: 
Dep01 = 81h, Dep02 = 82h â€¦ Dep19 = 93h</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's price.</Desc>
      </Arg>
      <Arg Name=""Quantity"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's quantity sold</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>Up to 7 for percentage of discount/addition. Use minus 
sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for percentage of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <DepNum[1..2]> <;> <Price[1..10]>{<'*'> <Quantity[1..10]>} {<','> <DiscAddP[1..7]>} {<':'> <DiscAddV[1..8]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintSpecialEventsFMreport"" CmdByte=""0x77"">
    <FPOperation>Print whole special FM events report.</FPOperation>
  </Command>
  <Command Name=""Read_IdleTimeout"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's idle timeout. This timeout is for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'Z'> <;> <'I'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""IdleTimeout"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for password in format ####</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'Z'> <;> <'I'> <;> <IdleTimeout[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDepartmentDifferentName"" CmdByte=""0x67"">
    <FPOperation>Read data for the state department number and different names.</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['3']> <;> <Number[2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Res>
      <Res Name=""NameAlbanian"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters for Albanian name</Desc>
      </Res>
      <Res Name=""NameSerbian"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters Serbian name</Desc>
      </Res>
      <Res Name=""NameEnglish"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters English name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Number[2]> <;> <NameAlbanian[23]> <;> <NameSerbian[23]> <;> <NameEnglish[23]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgOperator"" CmdByte=""0x4A"">
    <FPOperation>Programs the operator's name and password.</FPOperation>
    <Args>
      <Arg Name=""Number"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from '1' to '20' corresponding to operator's number</Desc>
      </Arg>
      <Arg Name=""Name"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for operator's name</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for operator's password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Number[1..2]> <;> <Name[20]> <;> <Password[6]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetBluetooth_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's Bluetooth password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the BT password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the BT password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'B'> <;> <'P'> <;> <PassLength[1..3]> <;> <Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadGPRS_APN"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GRPS APN.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'A'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""GPRS_APN_Len"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the APN length</Desc>
      </Res>
      <Res Name=""APN"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS APN</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'A'><;><GPRS_APN_Len[1..3]><;><APN[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadPLUqty"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the quantity registers of the specified article.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]> <;> <Option['2']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AvailableQuantity"" Value="""" Type=""Decimal"" MaxLen=""13"">
        <Desc>Up to13 symbols for quantity in stock</Desc>
      </Res>
      <Res Name=""OptionQuantityType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Availability of PLU stock is not monitored"" Value=""0"" />
          <Option Name=""Disable negative quantity"" Value=""1"" />
          <Option Name=""Enable negative quantity"" Value=""2"" />
        </Options>
        <Desc>1 symbol for Quantity flag with next value:  
- '0'- Availability of PLU stock is not monitored  
- '1'- Disable negative quantity  
- '2'- Enable negative quantity</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]> <;> <Option['2']> <;> <AvailableQuantity[1..13]> <;> <OptionQuantityType[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgDepartmentDifferentName"" CmdByte=""0x47"">
    <FPOperation>Set data for the state department number and different name.</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <Arg Name=""NameAlbanian"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters for Albanian name</Desc>
      </Arg>
      <Arg Name=""NameSerbian"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters Serbian name</Desc>
      </Arg>
      <Arg Name=""NameEnglish"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters English name</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['3']> <;> <Number[2]> <;> <NameAlbanian[23]> <;> <NameSerbian[23]> <;> <NameEnglish[23]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ScanAndPrintWiFiNetworks"" CmdByte=""0x4E"">
    <FPOperation>Scan and print all available WiFi networks</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'W'> <;> <'S'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadSerialAndFiscalNums"" CmdByte=""0x60"">
    <FPOperation>Provides information about the manufacturing number of the fiscal device, FM number and ECR Unique number.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""SerialNumber"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for individual number of the fiscal device</Desc>
      </Res>
      <Res Name=""FMNumber"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for individual number of the fiscal memory</Desc>
      </Res>
      <Res Name=""ECR_UniqueNum"" Value="""" Type=""Text"" MaxLen=""24"">
        <Desc>24 symbols for ECR unique number</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<SerialNumber[11]> <;> <FMNumber[11]> <;> <ECR_UniqueNum[24]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetServerCommunicationModule"" CmdByte=""0x4E"">
    <FPOperation>Program the communication module, which used to talk with the server</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionCommunicationModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""GSM"" Value=""0"" />
          <Option Name=""LAN"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - GSM 
 - '1' - LAN</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'S'> <;> <'E'> <;> <CommunicationModule[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadGPRS_Username"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GPRS username.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'U'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""GPRS_User_Len"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the GPRS username length</Desc>
      </Res>
      <Res Name=""Username"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS username</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'U'><;><GPRS_User_Len[1..3]><;><Username[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReceivedOnAccount_PaidOut"" CmdByte=""0x3B"">
    <FPOperation>Registers cash received on account or paid out.</FPOperation>
    <Args>
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to the operator's number</Desc>
      </Arg>
      <Arg Name=""OperPass"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for operator's password</Desc>
      </Arg>
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Amount"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for the amount lodged/withdrawn</Desc>
      </Arg>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength-2 symbols. In the beginning and in the end of line symbol '#' is 
printed.</Desc>
        <Meta MinLen=""64"" Compulsory=""false"" ValIndicatingPresence="";"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[<OperNum[1..2]> <;> <OperPass[6]> <;> <reserved['0']> <;> <Amount[1..10]> {<;> <Text[TextLength-2]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SaveNetworkSettings"" CmdByte=""0x4E"">
    <FPOperation>After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'A'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadCMinfo"" CmdByte=""0x57"">
    <FPOperation>Read CM info</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""C"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <Option['C']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Option"" Value=""C"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""CMUID"" Value="""" Type=""Text"" MaxLen=""24"">
        <Desc>24 symbols for CM unique ID number</Desc>
      </Res>
      <Res Name=""ProductionDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Up to 16 symbols for FD/CM production date</Desc>
      </Res>
      <Res Name=""ActivationDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Up to 16 symbols for FD/CM fiscalization date</Desc>
      </Res>
      <Res Name=""FDSN"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for coupled FD serial number 
CS 4 symbols for CM MCU flash checksum</Desc>
      </Res>
      <Res Name=""CS"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbols for CM MCU flash checksum</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Option['C']><;> <CMUID[24]><;> <ProductionDate ""DD-MM-YYYY hh:mm""><;> <ActivationDate ""DD-MM-YYYY hh:mm""> <;> <FDSN[10]><;><CS[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadECRprofileConnectionPeriod"" CmdByte=""0x4E"">
    <FPOperation>Provides information about period in which the sending attempt is made.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ConnectionPeriod"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols about connection in format ####</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'P'><;><ConnectionPeriod[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""DirectCommand"" CmdByte=""0xF1"">
    <FPOperation>Executes the direct command .</FPOperation>
    <Args>
      <Arg Name=""Input"" Value="""" Type=""Text"" MaxLen=""200"">
        <Desc>Raw request to FP</Desc>
      </Arg>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Output"" Value="""" Type=""Text"" MaxLen=""200"">
        <Desc>FP raw response</Desc>
      </Res>
    </Response>
  </Command>
  <Command Name=""ReadDetailedFMReportByZNum"" CmdByte=""0x78"">
    <FPOperation>Storage a detailed FM report by initial and end FM report number.</FPOperation>
    <Args>
      <Arg Name=""StartNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the initial report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""EndNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the final report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""PCStorage"" Value=""8"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]><;><PCStorage['8']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ReadEJByZBlocks"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal Report from by number of Z report blocks.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J0"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for initial number report in format ####</Desc>
      </Arg>
      <Arg Name=""EndZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for final number report in format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'J0'> <;> <'Z'> <;> <StartZNum[4]> <;> <EndZNum[4]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ReadCurrentRecInfo"" CmdByte=""0x72"">
    <FPOperation>Read the current status of the receipt.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""OptionIsReceiptOpened"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""ReceiptType"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>1 symbol with value '1'</Desc>
      </Res>
      <Res Name=""SalesNumber"" Value="""" Type=""Text"" MaxLen=""3"">
        <Desc>3 symbols for number of sales</Desc>
      </Res>
      <Res Name=""SubtotalVATG0"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG1"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG2"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG3"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG4"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG5"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG6"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""SubtotalVATG7"" Value="""" Type=""Text"" MaxLen=""11"">
        <Desc>11 symbols for subtotal from goods by VAT groups</Desc>
      </Res>
      <Res Name=""OptionInitiatedPayment"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""initiated payment"" Value=""1"" />
          <Option Name=""not initiated payment"" Value=""0"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - initiated payment 
 - '0' - not initiated payment</Desc>
      </Res>
      <Res Name=""OptionFinalizedPayment"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""finalized payment"" Value=""1"" />
          <Option Name=""not finalized payment"" Value=""0"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - finalized payment 
 - '0' - not finalized payment</Desc>
      </Res>
      <Res Name=""OptionPowerDownInReceipt"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
- '0' - No 
- '1' - Yes</Desc>
      </Res>
      <Res Name=""ChangeAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols the amount of the due change in the stated payment 
type</Desc>
      </Res>
      <Res Name=""OptionChangeType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Change In Cash"" Value=""0"" />
          <Option Name=""Change In Currency"" Value=""2"" />
          <Option Name=""Same As The payment"" Value=""1"" />
        </Options>
        <Desc>1 symbols with value: 
 - '0' - Change In Cash 
 - '1' - Same As The payment 
 - '2' - Change In Currency</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<IsReceiptOpened[1]> <;> <ReceiptType[1]><;><SalesNumber[3]> <;> <SubtotalVATG0[11]> <;> <SubtotalVATG1[11]> <;> < SubtotalVATG2[11]> <;> <SubtotalVATG3[11]> <;> <SubtotalVATG4[11]> <;> <SubtotalVATG5[11]> <;> <SubtotalVATG6[11]> <;> <SubtotalVATG7[11]> <;> <InitiatedPayment[1]> <;> <FinalizedPayment[1]> <;> < PowerDownInReceipt [1]> <;> <ChangeAmount[1..11]> <;> <OptionChangeType[1]]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetWiFi_NetworkName"" CmdByte=""0x4E"">
    <FPOperation>Program device's WiFi network name where it will connect. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""WiFiNameLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi network name len</Desc>
      </Arg>
      <Arg Name=""WiFiNetworkName"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi ssid network name</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'W'> <;> <'N'> <;> <WiFiNameLength[1..3]> <;>  <WiFiNetworkName[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadEJByZBlocksWithoutReceipts"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal Report from by number of Z report blocks only of the current receipt .</FPOperation>
    <Args>
      <Arg Name="""" Value=""J0"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for initial number report in format ####</Desc>
      </Arg>
      <Arg Name=""EndZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for final number report in format ####</Desc>
      </Arg>
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'J0'> <;> <'Z'> <;> <StartZNum[4]> <;> <EndZNum[4]> <;> <'D'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""SelectExternalDisplay"" CmdByte=""0x56"">
    <FPOperation>Select type of display</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionExternalDisplay"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Others"" Value=""0"" />
          <Option Name=""Tremol display"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
-'1' - Tremol display 
-'0' - Others</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['E']> <;> <ExternalDisplay[1]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintDetailedFMReportByNum"" CmdByte=""0x78"">
    <FPOperation>Print a detailed FM report by initial and end FM report number.</FPOperation>
    <Args>
      <Arg Name=""StartNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the initial report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""EndNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the final report number included in report, format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadShortReceiptSending"" CmdByte=""0x5A"">
    <FPOperation>Read info for enable/disable short receipts</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""F"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Option"" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <Option['F']> <;> <Option['R']>  ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Option"" Value=""ZF"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionActivationRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value : 
- '1' - Yes 
- '0' - No</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Option['ZF']> <;> <ActivationRS[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDeviceMAC_Address"" CmdByte=""0x4E"">
    <FPOperation>Provides information about TCP device MAC address</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'T'> <;> <'6'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""DeviceMAC"" Value="""" Type=""Text"" MaxLen=""12"">
        <Desc>12 symbols for device MAC</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'T'> <;> <'6'> <;> <DeviceMAC[12]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SellPLUwithSpecifiedVAT"" CmdByte=""0x31"">
    <FPOperation>Register the sell of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.</FPOperation>
    <Args>
      <Arg Name=""NamePLU"" Value="""" Type=""Text"" MaxLen=""36"">
        <Desc>36 symbols for article's name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for VAT class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's price.</Desc>
      </Arg>
      <Arg Name=""Quantity"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for quantity</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>Up to 7 symbols for percentage of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for value of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <Arg Name=""DepNum"" Value="""" Type=""Decimal_plus_80h"" MaxLen=""2"">
        <Desc>2 symbol for article department 
attachment, formed in the following manner: DepNum[HEX] + 80h 
example: Dep01 = 81h, Dep02 = 82h â€¦ Dep19 = 93h</Desc>
        <Meta MinLen=""2"" Compulsory=""false"" ValIndicatingPresence=""!"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <OptionVATClass[1]> <;> <Price[1..10]>{<'*'> <Quantity[1..10]>} {<','> <DiscAddP[1..7]>} {<':'> <DiscAddV[1..8]>} {<'!'> <DepNum[2]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintBriefFMReportByDate"" CmdByte=""0x7B"">
    <FPOperation>Print a brief FM report by initial and end date.</FPOperation>
    <Args>
      <Arg Name=""StartDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <StartDate ""DDMMYY""><;><EndDate ""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadServiceMode"" CmdByte=""0x5A"">
    <FPOperation>Read Service mode status</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Option"" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <Option['S']> <;> <Option['R']>  ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Option"" Value=""ZS"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionServiceMode"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Sales mode"" Value=""0"" />
          <Option Name=""Service mode"" Value=""1"" />
        </Options>
        <Desc>1 symbol:  
-'1' - Service mode 
-'0' - Sales mode</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Option['ZS']> <;> <ServiceMode[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""DisplayTextLine1"" CmdByte=""0x25"">
    <FPOperation>Shows a 20-symbols text in the upper external display line.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[20]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadServerAddress"" CmdByte=""0x4E"">
    <FPOperation>Provides information about the ECR's password</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'S'> <;> <'S'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ParamLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for parameter length</Desc>
      </Res>
      <Res Name=""ServerAddress"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for server password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'S'> <;> <'S'> <;> <ParamLength[1..3]> <;> <ServerAddress [100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadVATrates"" CmdByte=""0x62"">
    <FPOperation>Provides information about the current VAT rates which are the last values stored into the FM.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""VATrate0"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate A from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate1"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate B from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate2"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate C from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate3"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate D from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate4"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate E from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate5"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate F from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate6"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate G from 7 symbols in format ##.##%</Desc>
      </Res>
      <Res Name=""VATrate7"" Value="""" Type=""Decimal_with_format"" MaxLen=""7"" Format=""00.00%"">
        <Desc>Value of VAT rate H from 7 symbols in format ##.##%</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<VATrate0[7]><;><VATrate1[7]><;><VATrate2[7]><;><VATrate3[7]><;> <VATrate4[7]> <;> <VATrate5[7]> <;> <VATrate6[7]> <;> <VATrate7[7]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyReceivedSalesAmounts"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the amounts received from sales.</FPOperation>
    <Args>
      <Arg Name="""" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'4'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales by cash</Desc>
      </Res>
      <Res Name=""AmountPaymentOthers"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales by others payment</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'4'> <;> <AmountPayment[1..11]> <;> <AmountPaymentOthers[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPLUqty"" CmdByte=""0x4B"">
    <FPOperation>Programs available quantity and quantiy type for a certain article in the internal database.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""AvailableQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for quantity in stock</Desc>
      </Arg>
      <Arg Name=""OptionQuantityType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Availability of PLU stock is not monitored"" Value=""0"" />
          <Option Name=""Disable negative quantity"" Value=""1"" />
          <Option Name=""Enable negative quantity"" Value=""2"" />
        </Options>
        <Desc>1 symbol for Quantity flag with next value:  
 - '0'- Availability of PLU stock is not monitored  
 - '1'- Disable negative quantity  
 - '2'- Enable negative quantity</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<PLUNum[5]><;><Option['2']><;><AvailableQuantity [1..11]> <;> <OptionQuantityType[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadRegistrationInfo"" CmdByte=""0x61"">
    <FPOperation>Provides information about the owner's numbers and registration date time.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""IDNum"" Value="""" Type=""Text"" MaxLen=""13"">
        <Desc>13 symbols owner's ID number</Desc>
      </Res>
      <Res Name=""VATNum"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for owner's VAT registration number</Desc>
      </Res>
      <Res Name=""RegistrationNumber"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>Register number on the Fiscal device by registration</Desc>
      </Res>
      <Res Name=""RegistrationDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Date of registration</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<IDNum[13]> <;> <VATNum[15]> <;> <RegistrationNumber[6]><;> <RegistrationDate ""DD-MM-YYYY HH:MM"" >]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ClearDisplay"" CmdByte=""0x24"">
    <FPOperation>Clears the external display.</FPOperation>
  </Command>
  <Command Name=""SetDHCP_Enabled"" CmdByte=""0x4E"">
    <FPOperation>Program device's TCP network DHCP enabled or disabled. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionDhcpStatus"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Disabled 
 - '1' - Enabled</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'T'> <;> <'1'> <;> <DhcpStatus[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetGPRS_APN"" CmdByte=""0x4E"">
    <FPOperation>Program device's GPRS APN. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""A"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""GPRS_APN_Len"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the APN len</Desc>
      </Arg>
      <Arg Name=""APN"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS APN</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'A'><;><GPRS_APN_Len[1..3]><;><APN[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailyPObyOperator"" CmdByte=""0x6F"">
    <FPOperation>Provides information about the PO and the total number of operations by specified operator.</FPOperation>
    <Args>
      <Arg Name="""" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's 
number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'3'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""AmountPO_Payments"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the PO by type of payment</Desc>
      </Res>
      <Res Name=""NumPO"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for the total number of operations</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'3'> <;> <OperNum[1..2]> <;> <AmountPO_Payments[1..11]> <;> <NumPO[1..5]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PrintEJByReceiptNumFromZrep"" CmdByte=""0x7C"">
    <FPOperation>Printing Electronic Journal Report from receipt number to receipt number.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J1"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""000000"">
        <Desc>6 symbols for initial receipt number included in report in format ######</Desc>
      </Arg>
      <Arg Name=""EndReceiptNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""000000"">
        <Desc>6 symbols for final receipt number included in report in format ######</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<'J1'><;><'N'><;><StartReceiptNum[6]><;><EndReceiptNum[6]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgPLUprice"" CmdByte=""0x4B"">
    <FPOperation>Program the price for a certain article from the internal database.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article price</Desc>
      </Arg>
      <Arg Name=""OptionPrice"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Free price is disable valid only programmed price"" Value=""0"" />
          <Option Name=""Free price is enable"" Value=""1"" />
          <Option Name=""Limited price"" Value=""2"" />
        </Options>
        <Desc>1 byte for Price flag with next value: 
 - '0'- Free price is disable valid only programmed price 
 - '1'- Free price is enable 
 - '2'- Limited price</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]> <;> <Option['4']> <;> <Price[1..10]> <;> <OptionPrice[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""RawRead"" CmdByte=""0xFF"">
    <FPOperation> Reads raw bytes from FP.</FPOperation>
    <Args>
      <Arg Name=""Count"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>How many bytes to read if EndChar is not specified</Desc>
      </Arg>
      <Arg Name=""EndChar"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>The character marking the end of the data. If present Count parameter is ignored.</Desc>
      </Arg>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Bytes"" Value="""" Type=""Base64"" MaxLen=""100000"">
        <Desc>FP raw response in BASE64 encoded string</Desc>
      </Res>
    </Response>
  </Command>
  <Command Name=""ReadDHCP_Status"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's DHCP status</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'T'> <;> <'1'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionDhcpStatus"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>(DHCP Status)1 symbol with value: 
 - '0' - Disabled 
 - '1' - Enabled</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'T'> <;> <'1'> <;> <DhcpStatus[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadTCP_Addresses"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's IP address, subnet mask, gateway address, DNS address.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'T'> <;> <AddressType[1]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>(Address) 1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Res>
      <Res Name=""DeviceAddress"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for the device's addresses</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'T'> <;> <AddressType[1]> <;> <DeviceAddress[15]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgTaxiServiceGeneral"" CmdByte=""0x4B"">
    <FPOperation>Programs the general data for a certain taxi service in the internal FD database. The name field is fixed.</FPOperation>
    <Args>
      <Arg Name=""ServiceNum"" Value="""" Type=""Text"" MaxLen=""2"">
        <Desc>2 symbols for service number</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""ServiceNameAL"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for service name</Desc>
      </Arg>
      <Arg Name=""ServiceNameSR"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for service name</Desc>
      </Arg>
      <Arg Name=""ServiceNameEN"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for service name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <ServiceNum[2]> <;> <Option['1']> <;> <ServiceNameAL[30]> <;> <ServiceNameSR[30]> <;> <ServiceNameEN[30]> <;> < OptionVATClass[1] > ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadECRprofileType"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's profile type.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Y"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'Y'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Y"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionProfileType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Profile 0"" Value=""0"" />
          <Option Name=""Profile 1"" Value=""1"" />
        </Options>
        <Desc>(Profile type) 1 symbol with value: 
 - '0'- Profile 0 
 - '1' - Profile 1</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'Y'><;><ProfileType[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgHeader"" CmdByte=""0x49"">
    <FPOperation>Program the contents of a header lines.</FPOperation>
    <Args>
      <Arg Name=""OptionHeaderLine"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Header 1"" Value=""1"" />
          <Option Name=""Header 2"" Value=""2"" />
          <Option Name=""Header 3"" Value=""3"" />
          <Option Name=""Header 4"" Value=""4"" />
          <Option Name=""Header 5"" Value=""5"" />
          <Option Name=""Header 6"" Value=""6"" />
          <Option Name=""Header 7"" Value=""7"" />
          <Option Name=""Header 8"" Value=""8"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - Header 1 
 - '2' - Header 2 
 - '3' - Header 3 
 - '4' - Header 4 
 - '5' - Header 5 
 - '6' - Header 6 
 - '7' - Header 7 
 - '8' - Header 8</Desc>
      </Arg>
      <Arg Name=""HeaderText"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength symbols for header lines</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<OptionHeaderLine[1]> <;> <HeaderText[TextLength]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadLanguage"" CmdByte=""0x4F"">
    <FPOperation>Read the language of the device</FPOperation>
    <Args>
      <Arg Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'L'> <;> <'R'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLanguage"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Albanian"" Value=""0"" />
          <Option Name=""English"" Value=""2"" />
          <Option Name=""Serbian"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Albanian 
 - '1' - Serbian 
 - '2' - English</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'L'> <;> <'R'> <;> < Language [1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PrintOptionalDiagnostics"" CmdByte=""0x22"">
    <FPOperation>Prints out SD card, crypto modul and FM diagnostic receipt.</FPOperation>
    <Args>
      <Arg Name=""OptionDiagnostics"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Crypto modul"" Value=""C"" />
          <Option Name=""FM"" Value=""F"" />
          <Option Name=""SD card"" Value=""S"" />
        </Options>
        <Desc>1 symbol with values: 
 - 'S'- SD card 
 - 'C' - Crypto modul 
 - 'F' - FM</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionDiagnostics[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadPLUDifferentName"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the price and different name of the specified article.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option['6']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>(PLU Number) 5 symbols for article number in format: #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PLUNameAlbanian"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for Albanian PLU</Desc>
      </Res>
      <Res Name=""PLUNameSerbian"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for Serbian PLU</Desc>
      </Res>
      <Res Name=""PLUNameEnglish"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for English PLU</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]><;><Option['6']><;><PLUNameAlbanian[32]><;> <PLUNameSerbian[32]><;>< PLUNameEnglish[32]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgDepartmentOption1"" CmdByte=""0x47"">
    <FPOperation>Set data for the state department number from the internal FD database.</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <Arg Name=""Name"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters department name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for department price</Desc>
      </Arg>
      <Arg Name=""FlagsPrice"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>1 symbol with value: 
Flags.7=1 
Flags.6=0 
Flags.5=0 
Flags.4=0 
Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['1']> <;> <Number[2]> <;> <Name[23]> <;> <OptionVATClass[1]> <;> <Price[1..10]> <;> <FlagsPrice[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""UnpairAllDevices"" CmdByte=""0x4E"">
    <FPOperation>Removes all paired devices.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'B'> <;> <'D'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DisplayDateTime"" CmdByte=""0x28"">
    <FPOperation>Shows the current date and time on the external display.</FPOperation>
  </Command>
  <Command Name=""RefundPLUwithSpecifiedVAT"" CmdByte=""0x3C"">
    <FPOperation>Register the refund of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.</FPOperation>
    <Args>
      <Arg Name=""NamePLU"" Value="""" Type=""Text"" MaxLen=""36"">
        <Desc>36 symbols for article's name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for VAT class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for article's price.</Desc>
      </Arg>
      <Arg Name=""Quantity"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for quantity</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>Up to 7 symbols for percentage of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for value of discount/addition. 
Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <Arg Name=""DepNum"" Value="""" Type=""Decimal_plus_80h"" MaxLen=""2"">
        <Desc>1 symbol for article department 
attachment, formed in the following manner; example: Dep01=81h, 
Dep02=82h â€¦ Dep19=93h</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""!"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <OptionVATClass[1]> <;> <Price[1..10]>{<'*'> <Quantity[1..10]>} {<','> <DiscAddP[1..7]>} {<':'> <DiscAddV[1..8]>}{<'!'><DepNum[1]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetTCP_AutoStart"" CmdByte=""0x4E"">
    <FPOperation>Set device's TCP autostart . To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionTCPAutoStart"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - No 
 - '1' - Yes</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'Z'> <;> <'2'> <;> <TCPAutoStart[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetTCP_ActiveModule"" CmdByte=""0x4E"">
    <FPOperation>Sets the used TCP module for communication - Lan or WiFi. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionUsedModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""LAN"" Value=""1"" />
          <Option Name=""WiFi"" Value=""2"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - LAN 
 - '2' - WiFi</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'Z'> <;> <'U'> <;> <UsedModule[1]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadPLUName"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the price and name of the specified  article.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option['5']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>(PLU Number) 5 symbols for article number in format: #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PLUName"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for PLU name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]><;><Option['5']><;><PLUName[32]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadTCP_UsedModule"" CmdByte=""0x4E"">
    <FPOperation>Read the used TCP module for communication - Lan or WiFi. Command is available if the device support both modules only.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'Z'> <;> <'U'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionUsedModule"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""LAN"" Value=""1"" />
          <Option Name=""WiFi"" Value=""2"" />
        </Options>
        <Desc>(Module) 1 symbol with value: 
 - '1' - LAN 
 - '2' - WiFi</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'Z'> <;> <'U'> <;> <UsedModule[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPLUName"" CmdByte=""0x4B"">
    <FPOperation>Program the price for a certain article and name.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PLUName"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for PLU name</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<PLUNum[5]><;><Option['5']><;><PLUName[32]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PaperFeed"" CmdByte=""0x2B"">
    <FPOperation>Feeds one line of paper.</FPOperation>
  </Command>
  <Command Name=""CloseReceipt"" CmdByte=""0x38"">
    <FPOperation>Close the fiscal receipt (Fiscal receipt, or Non-fical receipt). When the payment is finished.</FPOperation>
  </Command>
  <Command Name=""PrintBarcode"" CmdByte=""0x51"">
    <FPOperation>Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionCodeType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""CODABAR"" Value=""6"" />
          <Option Name=""CODE 128"" Value=""I"" />
          <Option Name=""CODE 39"" Value=""4"" />
          <Option Name=""CODE 93"" Value=""H"" />
          <Option Name=""EAN 13"" Value=""2"" />
          <Option Name=""EAN 8"" Value=""3"" />
          <Option Name=""ITF"" Value=""5"" />
          <Option Name=""UPC A"" Value=""0"" />
          <Option Name=""UPC E"" Value=""1"" />
        </Options>
        <Desc>1 symbol with possible values: 
 - '0' - UPC A 
 - '1' - UPC E 
 - '2' - EAN 13 
 - '3' - EAN 8 
 - '4' - CODE 39 
 - '5' - ITF 
 - '6' - CODABAR 
 - 'H' - CODE 93 
 - 'I' - CODE 128</Desc>
      </Arg>
      <Arg Name=""CodeLen"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>1..2 bytes for number of bytes according to the table</Desc>
      </Arg>
      <Arg Name=""CodeData"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>From 0 to 255 bytes data in range according to the table</Desc>
      </Arg>
      <Arg Name=""OptionCenter"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol in order to place the barcode in the middle: 
-'1' - Yes 
-'0' - No</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="";"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <CodeType[1]> <;> <CodeLen[1..2]> <;> <CodeData[100]> {<;><Center[1]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintDepartmentReport"" CmdByte=""0x76"">
    <FPOperation>Print a department report with or without zeroing ('Z' or 'X').</FPOperation>
    <Args>
      <Arg Name=""OptionZeroing"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Without zeroing"" Value=""X"" />
          <Option Name=""Zeroing"" Value=""Z"" />
        </Options>
        <Desc>1 symbol with value: 
 - 'Z' - Zeroing 
 - 'X' - Without zeroing</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgramLanguage"" CmdByte=""0x4F"">
    <FPOperation>Program the language of the device</FPOperation>
    <Args>
      <Arg Name="""" Value=""L"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionLanguage"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Albanian"" Value=""0"" />
          <Option Name=""English"" Value=""2"" />
          <Option Name=""Serbian"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Albanian 
 - '1' - Serbian 
 - '2' - English</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'L'> <;> <'W'> <;> < Language[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""DisplayTextLine2"" CmdByte=""0x26"">
    <FPOperation>Shows a 20-symbols text in the lower external display line.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols text</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[20]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ManageShortReceiptSending"" CmdByte=""0x5A"">
    <FPOperation>Temporary enable/disable short receipts sending</FPOperation>
    <Args>
      <Arg Name=""Option1"" Value=""F"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Option2"" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionActivationRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value : 
- '1' - Yes 
- '0' - No</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option1['F']> <;> <Option2['W']> <;> <ActivationRS[1]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailyCounters"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the total fiscal counters and last Z- report date and time.</FPOperation>
    <Args>
      <Arg Name="""" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'5'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""TotalReciepts"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>5 symbols for total number of fiscal receipts</Desc>
      </Res>
      <Res Name=""NumLastFMBlock"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of the last FM report</Desc>
      </Res>
      <Res Name=""NumEJ"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of EJ</Desc>
      </Res>
      <Res Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>16 symbols for date and time of the last block storage in FM in format 
""DD-MM-YYYY HH:MM""</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'5'> <;> <TotalReciepts[1..5]> <;> <NumLastFMBlock[1..5]> <;> <NumEJ[1..5]> <;> <DateTime ""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetWiFi_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's WiFi network password where it will connect. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the WiFi password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'W'> <;> <'P'> <;> <PassLength[1..3]> <;> <Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""StartTest_Bluetooth"" CmdByte=""0x4E"">
    <FPOperation>Start Bluetooth test on the device and print out the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'B'> <;> <'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintCurrentHeader"" CmdByte=""0x53"">
    <FPOperation>Print current headers and Fiscal Memory operative header</FPOperation>
    <Args>
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'1'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""EraseAllPLUs"" CmdByte=""0x4B"">
    <FPOperation>Erase all articles in PLU database.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value=""00000"" Type=""OptionHardcoded"" MaxLen=""5"" />
      <Arg Name=""Option"" Value=""$"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PLUNum['00000']> <;> <Option['$']> <;> <Password[6]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""StoreCurrentHeaderInFM"" CmdByte=""0x53"">
    <FPOperation>Store the header into fiscal memory.</FPOperation>
    <Args>
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'2'> <;> <Password[6]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailyRAbyOperator"" CmdByte=""0x6F"">
    <FPOperation>Provides information about the RA and the total number of operations by specified operator.</FPOperation>
    <Args>
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's 
number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'2'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""AmountRA_Payments"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for the RA by type of payment</Desc>
      </Res>
      <Res Name=""NumRA"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for the total number of operations</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'2'> <;> <OperNum[1..2]> <;> <AmountRA_Payments[1..11]> <;> <NumRA[1..5]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""StartTest_GPRS"" CmdByte=""0x4E"">
    <FPOperation>Start GPRS test on the device and print out the result</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'G'> <;> <'T'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadHeader"" CmdByte=""0x69"">
    <FPOperation>Provides the content of the header lines.</FPOperation>
    <Args>
      <Arg Name=""OptionHeaderLine"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Header 1"" Value=""1"" />
          <Option Name=""Header 2"" Value=""2"" />
          <Option Name=""Header 3"" Value=""3"" />
          <Option Name=""Header 4"" Value=""4"" />
          <Option Name=""Header 5"" Value=""5"" />
          <Option Name=""Header 6"" Value=""6"" />
          <Option Name=""Header 7"" Value=""7"" />
          <Option Name=""Header 8"" Value=""8"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - Header 1 
 - '2' - Header 2 
 - '3' - Header 3 
 - '4' - Header 4 
 - '5' - Header 5 
 - '6' - Header 6 
 - '7' - Header 7 
 - '8' - Header 8</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionHeaderLine[1]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""OptionHeaderLine"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Header 1"" Value=""1"" />
          <Option Name=""Header 2"" Value=""2"" />
          <Option Name=""Header 3"" Value=""3"" />
          <Option Name=""Header 4"" Value=""4"" />
          <Option Name=""Header 5"" Value=""5"" />
          <Option Name=""Header 6"" Value=""6"" />
          <Option Name=""Header 7"" Value=""7"" />
          <Option Name=""Header 8"" Value=""8"" />
        </Options>
        <Desc>(Line Number) 1 symbol with value: 
 - '1' - Header 1 
 - '2' - Header 2 
 - '3' - Header 3 
 - '4' - Header 4 
 - '5' - Header 5 
 - '6' - Header 6 
 - '7' - Header 7 
 - '8' - Header 8</Desc>
      </Res>
      <Res Name=""HeaderText"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength symbols</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<OptionHeaderLine[1]> <;><HeaderText[TextLength]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SellTaxiService"" CmdByte=""0x32"">
    <FPOperation>Register the specified service from the internal FD DB.</FPOperation>
    <Args>
      <Arg Name=""OptionSign"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Correction"" Value=""-"" />
          <Option Name=""Sale"" Value=""+"" />
        </Options>
        <Desc>1 symbol with optional value: 
- '+' - Sale 
- '-'  - Correction 
ServiceNumber 2 symbols for Service number of FD's database in format ##</Desc>
        <Meta MinLen=""1"" Compulsory=""true"" NoSemiColumnSeparatorAfterIt=""true"" />
      </Arg>
      <Arg Name=""ServiceNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>ber 2 symbols for Service number of FD's database in format ##</Desc>
      </Arg>
      <Arg Name=""StartTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""HH:MM"">
        <Desc>in format: 'hh:mm'</Desc>
      </Arg>
      <Arg Name=""EndTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""HH:MM"">
        <Desc>in format: 'hh:mm'</Desc>
      </Arg>
      <Arg Name=""Duration"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>1..7 symbols for Duration in seconds</Desc>
      </Arg>
      <Arg Name=""Distance"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>1..7 symbols for Distance in meters</Desc>
      </Arg>
      <Arg Name=""InitialSUM"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for Initial fee</Desc>
      </Arg>
      <Arg Name=""TransportSUM"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for Transport sum</Desc>
      </Arg>
      <Arg Name=""StayMinutes"" Value="""" Type=""Decimal"" MaxLen=""4"">
        <Desc>1..4 symbols for Stay in minutes</Desc>
      </Arg>
      <Arg Name=""StaySUM"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for Stay sum</Desc>
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for percentage of 
discount/addition. Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionSign[1]><ServiceNum[2]><;><StartTime ""hh:mm""> <;>  <EndTime ""hh:mm""><;> <Duration[1..7]> <;> <Distance[1..7]> <;> <InitialSUM[1..8]><;> <TransportSUM[1..8]><;>  <StayMinutes[1..4]><;> <StaySUM[1..8]>  {<':'> <DiscAddV[1..8]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""CutPaper"" CmdByte=""0x29"">
    <FPOperation>Start paper cutter. The command works only in fiscal printer devices.</FPOperation>
  </Command>
  <Command Name=""ReadDeviceModuleSupportByFirmware"" CmdByte=""0x4E"">
    <FPOperation>Provide an information about modules supported by device's firmware.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'D'> <;> <'S'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLAN"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for LAN support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionWiFi"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for WiFi support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionGPRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for GPRS support 
 - '0' - No 
 - '1' - Yes 
BT (Bluetooth) 1 symbol for Bluetooth support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionBT"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Bluetooth) 1 symbol for Bluetooth support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'D'> <;> <'S'> <;> <LAN[1]> <;> <WiFi[1]> <;> <GPRS[1]> <;> <BT[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadWiFi_Password"" CmdByte=""0x4E"">
    <FPOperation>Read device's connected WiFi network password</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'W'> <;> <'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the WiFi password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's WiFi password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'W'> <;> <'P'> <;> <PassLength[1..3]> <;> <Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPLUbarcode"" CmdByte=""0x4B"">
    <FPOperation>Program the Barcode number for a certain article (item) from the internal database.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Barcode"" Value="""" Type=""Text"" MaxLen=""13"">
        <Desc>13 symbols for barcode</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option['3']><;><Barcode[13]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintDetailedFMReportByDate"" CmdByte=""0x7A"">
    <FPOperation>Prints a detailed FM report by initial and end date.</FPOperation>
    <Args>
      <Arg Name=""StartDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <StartDate ""DDMMYY""><;><EndDate ""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadBriefFMReportByNum"" CmdByte=""0x79"">
    <FPOperation>Store a brief FM report by initial and end FM report number.</FPOperation>
    <Args>
      <Arg Name=""StartNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the initial report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""EndNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the final report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""PCStorage"" Value=""8"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> <;><PCStorage['8']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ReadSymbolsPerLine"" CmdByte=""0x4F"">
    <FPOperation>Read the number of symbols per line.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'R'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Symbols"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols indicating a number of symbols per line in format ##</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'P'> <;> <'R'> <;> <Symbols[2]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadPLUgeneral"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the general registers of the specified.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]> <;> <Option['1']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PLUName"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for article name</Desc>
      </Res>
      <Res Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>1..11 symbols for article price</Desc>
      </Res>
      <Res Name=""FlagsPriceQty"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>(Setting price, quantity, type of goods) 1 symbols with value: 
Flags.7=1 
Flags.6=0 
Flags.5=1 Yes, Flags.5=0 No (Fractional quantity disabled) 
Flags.4=1 Yes, Flags.4=0 No (Single Transaction)  
Flags.3=1 Yes, Flags.3=0 No (Allow negative) 
Flags.2=1 Yes, Flags.2=0 No (Monitoring quantity in stock) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Res>
      <Res Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Res>
      <Res Name=""BelongToDepNumber"" Value="""" Type=""Decimal_plus_80h"" MaxLen=""2"">
        <Desc>BelongToDepNo + 80h, 1 symbol for PLU department = 0x80 â€¦ 0x93</Desc>
      </Res>
      <Res Name=""AvailableQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for quantity in stock</Desc>
      </Res>
      <Res Name=""Barcode"" Value="""" Type=""Text"" MaxLen=""13"">
        <Desc>13 symbols for article barcode</Desc>
      </Res>
      <Res Name=""TurnoverAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for PLU accumulated turnover</Desc>
      </Res>
      <Res Name=""SoldQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for Sales quantity of the article</Desc>
      </Res>
      <Res Name=""RefundAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for PLU accumulated refund</Desc>
      </Res>
      <Res Name=""RefundQTY"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for number of refund quantity of PLU</Desc>
      </Res>
      <Res Name=""LastZReportNumber"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for the number of the last article report with zeroing</Desc>
      </Res>
      <Res Name=""LastZReportDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>16 symbols for the date and time in format ""DD-MM-YYYY HH:MM""</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]> <;> <Option['1']> <;> <PLUName[32]> <;> <Price[1..11]> <;> <FlagsPriceQty[1]> <;> <OptionVATClass[1]> <;> <BelongToDepNumber[1]> <;> <AvailableQuantity[1..11]> <;> <Barcode[13]> <;> <TurnoverAmount[1..11]> <;> <SoldQuantity[1..11]> <;><RefundAmount[1..11]><;>< RefundQTY[1..11]><;> <LastZReportNumber[1..5]> <;> <LastZReportDate ""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyReceivedSalesAmountsByOperator"" CmdByte=""0x6F"">
    <FPOperation>Read the amounts received from sales by type of payment and specified operator.</FPOperation>
    <Args>
      <Arg Name="""" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's 
number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'4'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales change by cash</Desc>
      </Res>
      <Res Name=""AmountPaymentOthers"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales change by others 
payment</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'4'> <;> <OperNum[1..2]> <;> <AmountPayment[1..11]> <;> <AmountPaymentOthers[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""CloseNonFiscReceipt"" CmdByte=""0x2F"">
    <FPOperation>Closes the non-fiscal receipt.</FPOperation>
  </Command>
  <Command Name=""PrintBriefFMReportByNum"" CmdByte=""0x79"">
    <FPOperation>Print a brief FM report by initial and end FM report number.</FPOperation>
    <Args>
      <Arg Name=""StartNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the initial FM report number included in report, format ####</Desc>
      </Arg>
      <Arg Name=""EndNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for the final FM report number included in report, format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadEJ"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal report with all documents.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J0"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""*"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'J0'> <;> <'*'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""Payment"" CmdByte=""0x35"">
    <FPOperation>Registers the payment in the receipt with specified type of payment and amount received.</FPOperation>
    <Args>
      <Arg Name=""OptionPaymentType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Card"" Value=""1"" />
          <Option Name=""Cash"" Value=""0"" />
          <Option Name=""Credit"" Value=""3"" />
          <Option Name=""Currency"" Value=""4"" />
          <Option Name=""Voucher"" Value=""2"" />
        </Options>
        <Desc>1 symbol with values  
 - '0' - Cash 
 - '1' - Card  
 - '2' - Voucher  
 - '3' - Credit 
 - '4' - Currency</Desc>
      </Arg>
      <Arg Name=""OptionChange"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""With Change"" Value=""0"" />
          <Option Name=""Without Change"" Value=""1"" />
        </Options>
        <Desc>Default value is 0, 1 symbol with value: 
 - '0 - With Change 
 - '1' - Without Change</Desc>
      </Arg>
      <Arg Name=""Amount"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 characters for received amount</Desc>
      </Arg>
      <Arg Name=""OptionChangeType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Change In Cash"" Value=""0"" />
          <Option Name=""Change In Currency"" Value=""2"" />
          <Option Name=""Same As The payment"" Value=""1"" />
        </Options>
        <Desc>1 symbols with value: 
 - '0' - Change In Cash 
 - '1' - Same As The payment 
 - '2' - Change In Currency</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence=""*"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PaymentType[1]> <;> <OptionChange[1]> <;> <Amount[1..10]> { <*> <OptionChangeType[1]> } ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgDepartmentName"" CmdByte=""0x47"">
    <FPOperation>Set data for the state department number and name</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <Arg Name=""Name"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters department name</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['2']> <;> <Number[2]> <;> <Name[23]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDeviceTCP_Addresses"" CmdByte=""0x4E"">
    <FPOperation>Program device's network IP address, subnet mask, gateway address, DNS address. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""T"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionAddressType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""DNS address"" Value=""5"" />
          <Option Name=""Gateway address"" Value=""4"" />
          <Option Name=""IP address"" Value=""2"" />
          <Option Name=""Subnet Mask"" Value=""3"" />
        </Options>
        <Desc>1 symbol with value: 
 - '2' - IP address 
 - '3' - Subnet Mask 
 - '4' - Gateway address 
 - '5' - DNS address</Desc>
      </Arg>
      <Arg Name=""DeviceAddress"" Value="""" Type=""Text"" MaxLen=""15"">
        <Desc>15 symbols for the selected address</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'T'> <;> <AddressType[1]> <;> <DeviceAddress[15]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadLastDailyReportInfo"" CmdByte=""0x73"">
    <FPOperation>Read date and number of last Z-report and last RAM reset event.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""LastZDailyReportDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy"">
        <Desc>10 symbols for last Z-report date in DD-MM-YYYY format</Desc>
      </Res>
      <Res Name=""LastZDailyReportNum"" Value="""" Type=""Decimal"" MaxLen=""4"">
        <Desc>Up to 4 symbols for the number of the last daily report</Desc>
      </Res>
      <Res Name=""LastRAMResetNum"" Value="""" Type=""Decimal"" MaxLen=""4"">
        <Desc>Up to 4 symbols for the number of the last RAM reset</Desc>
      </Res>
      <Res Name=""TotalReceiptCounter"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""000000"">
        <Desc>6 symbols for total number of receipts in format ######</Desc>
      </Res>
      <Res Name=""DateTimeLastFiscRec"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>Date Time parameter in format: DD-MM-YYYY HH:MM</Desc>
      </Res>
      <Res Name=""EJNum"" Value="""" Type=""Text"" MaxLen=""2"">
        <Desc>Up to 2 symbols for number of EJ</Desc>
      </Res>
      <Res Name=""FirstEJZreport"" Value="""" Type=""Decimal"" MaxLen=""4"">
        <Desc>Up to 4 symbols for first EJ Z-report number</Desc>
      </Res>
      <Res Name=""LastEJZreport"" Value="""" Type=""Decimal"" MaxLen=""4"">
        <Desc>Up to 4 symbols for last EJ Z-report number</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<LastZDailyReportDate ""DD-MM-YYYY""> <;> <LastZDailyReportNum[1..4]> <;> <LastRAMResetNum[1..4]> <;> <TotalReceiptCounter[6]> <;> <DateTimeLastFiscRec ""DD-MM-YYYY HH:MM""> <;> <EJNum[2]> <;> <FirstEJZreport[1..4]><;><LastEJZreport[1..4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadECRprofileZreportSending"" CmdByte=""0x4E"">
    <FPOperation>Provides information about sending of Z report to server automatically after Z report or not.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'Z'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionSendAfterZ"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Send after Z report) 1 symbol with value: 
 - '0'- No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'Z'><;><SendAfterZ[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PrintText"" CmdByte=""0x37"">
    <FPOperation>Print a free text. The command can be executed only if receipt is opened (Fiscal receipt or Non-fical receipt). In the beginning and in the end of line symbol '#' is printed.</FPOperation>
    <Args>
      <Arg Name=""Text"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength-2 symbols</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Text[TextLength-2]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintOperatorReport"" CmdByte=""0x7D"">
    <FPOperation>Prints an operator's report for a specified operator (0 = all operators) with or without zeroing ('Z' or 'X'). When a 'Z' value is specified the report should include all operators.</FPOperation>
    <Args>
      <Arg Name=""OptionZeroing"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Without zeroing"" Value=""X"" />
          <Option Name=""Zeroing"" Value=""Z"" />
        </Options>
        <Desc>with following values: 
 - 'Z' - Zeroing 
 - 'X' - Without zeroing</Desc>
      </Arg>
      <Arg Name=""Number"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 0 to 20corresponding to operator's number 
,0 for all operators</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> <;> <Number[1..2]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadStatus"" CmdByte=""0x20"">
    <FPOperation>Provides detailed 7-byte information about the current status of the fiscal device.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""FM_Read_only"" Value="""" Type=""Status"" Byte=""0"" Bit=""0"">
        <Desc>FM Read only</Desc>
      </Res>
      <Res Name=""Power_down_in_opened_fiscal_receipt"" Value="""" Type=""Status"" Byte=""0"" Bit=""1"">
        <Desc>Power down in opened fiscal receipt</Desc>
      </Res>
      <Res Name=""Printer_not_ready_overheat"" Value="""" Type=""Status"" Byte=""0"" Bit=""2"">
        <Desc>Printer not ready - overheat</Desc>
      </Res>
      <Res Name=""DateTime_not_set"" Value="""" Type=""Status"" Byte=""0"" Bit=""3"">
        <Desc>DateTime not set</Desc>
      </Res>
      <Res Name=""DateTime_wrong"" Value="""" Type=""Status"" Byte=""0"" Bit=""4"">
        <Desc>DateTime wrong</Desc>
      </Res>
      <Res Name=""RAM_reset"" Value="""" Type=""Status"" Byte=""0"" Bit=""5"">
        <Desc>RAM reset</Desc>
      </Res>
      <Res Name=""Hardware_clock_error"" Value="""" Type=""Status"" Byte=""0"" Bit=""6"">
        <Desc>Hardware clock error</Desc>
      </Res>
      <Res Name=""Printer_not_ready_no_paper"" Value="""" Type=""Status"" Byte=""1"" Bit=""0"">
        <Desc>Printer not ready - no paper</Desc>
      </Res>
      <Res Name=""Reports_registers_Overflow"" Value="""" Type=""Status"" Byte=""1"" Bit=""1"">
        <Desc>Reports registers Overflow</Desc>
      </Res>
      <Res Name=""Blocking_after_24_hours_without_report"" Value="""" Type=""Status"" Byte=""1"" Bit=""2"">
        <Desc>Blocking after 24 hours without report</Desc>
      </Res>
      <Res Name=""Daily_report_is_not_zeroed"" Value="""" Type=""Status"" Byte=""1"" Bit=""3"">
        <Desc>Daily report is not zeroed</Desc>
      </Res>
      <Res Name=""Article_report_is_not_zeroed"" Value="""" Type=""Status"" Byte=""1"" Bit=""4"">
        <Desc>Article report is not zeroed</Desc>
      </Res>
      <Res Name=""Operator_report_is_not_zeroed"" Value="""" Type=""Status"" Byte=""1"" Bit=""5"">
        <Desc>Operator report is not zeroed</Desc>
      </Res>
      <Res Name=""Non_printed_copy"" Value="""" Type=""Status"" Byte=""1"" Bit=""6"">
        <Desc>Non-printed copy</Desc>
      </Res>
      <Res Name=""Opened_Non_fiscal_Receipt"" Value="""" Type=""Status"" Byte=""2"" Bit=""0"">
        <Desc>Opened Non-fiscal Receipt</Desc>
      </Res>
      <Res Name=""Opened_Fiscal_Receipt"" Value="""" Type=""Status"" Byte=""2"" Bit=""1"">
        <Desc>Opened Fiscal Receipt</Desc>
      </Res>
      <Res Name=""fiscal_receipt_type_1"" Value="""" Type=""Status"" Byte=""2"" Bit=""2"">
        <Desc>fiscal receipt type 1</Desc>
      </Res>
      <Res Name=""fiscal_receipt_type_2"" Value="""" Type=""Status"" Byte=""2"" Bit=""3"">
        <Desc>fiscal receipt type 2</Desc>
      </Res>
      <Res Name=""fiscal_receipt_type_3"" Value="""" Type=""Status"" Byte=""2"" Bit=""4"">
        <Desc>fiscal receipt type 3</Desc>
      </Res>
      <Res Name=""SD_card_near_full"" Value="""" Type=""Status"" Byte=""2"" Bit=""5"">
        <Desc>SD card near full</Desc>
      </Res>
      <Res Name=""SD_card_full"" Value="""" Type=""Status"" Byte=""2"" Bit=""6"">
        <Desc>SD card full</Desc>
      </Res>
      <Res Name=""No_FM_module"" Value="""" Type=""Status"" Byte=""3"" Bit=""0"">
        <Desc>No FM module</Desc>
      </Res>
      <Res Name=""FM_error"" Value="""" Type=""Status"" Byte=""3"" Bit=""1"">
        <Desc>FM error</Desc>
      </Res>
      <Res Name=""FM_full"" Value="""" Type=""Status"" Byte=""3"" Bit=""2"">
        <Desc>FM full</Desc>
      </Res>
      <Res Name=""FM_near_full"" Value="""" Type=""Status"" Byte=""3"" Bit=""3"">
        <Desc>FM near full</Desc>
      </Res>
      <Res Name=""Decimal_point"" Value="""" Type=""Status"" Byte=""3"" Bit=""4"">
        <Desc>Decimal point (1=fract, 0=whole)</Desc>
      </Res>
      <Res Name=""FM_fiscalized"" Value="""" Type=""Status"" Byte=""3"" Bit=""5"">
        <Desc>FM fiscalized</Desc>
      </Res>
      <Res Name=""FM_produced"" Value="""" Type=""Status"" Byte=""3"" Bit=""6"">
        <Desc>FM produced</Desc>
      </Res>
      <Res Name=""Printer_automatic_cutting"" Value="""" Type=""Status"" Byte=""4"" Bit=""0"">
        <Desc>Printer: automatic cutting</Desc>
      </Res>
      <Res Name=""External_display_transparent_display"" Value="""" Type=""Status"" Byte=""4"" Bit=""1"">
        <Desc>External display: transparent display</Desc>
      </Res>
      <Res Name=""Missing_display"" Value="""" Type=""Status"" Byte=""4"" Bit=""3"">
        <Desc>Missing display</Desc>
      </Res>
      <Res Name=""Drawer_automatic_opening"" Value="""" Type=""Status"" Byte=""4"" Bit=""4"">
        <Desc>Drawer: automatic opening</Desc>
      </Res>
      <Res Name=""Customer_logo_included_in_the_receipt"" Value="""" Type=""Status"" Byte=""4"" Bit=""5"">
        <Desc>Customer logo included in the receipt</Desc>
      </Res>
      <Res Name=""Blocking_after_10_days_without_communication"" Value="""" Type=""Status"" Byte=""4"" Bit=""6"">
        <Desc>Blocking after 10 days without communication</Desc>
      </Res>
      <Res Name=""Service_jumper"" Value="""" Type=""Status"" Byte=""5"" Bit=""0"">
        <Desc>Service jumper</Desc>
      </Res>
      <Res Name=""Missing_certificates"" Value="""" Type=""Status"" Byte=""5"" Bit=""1"">
        <Desc>Missing certificates</Desc>
      </Res>
      <Res Name=""Wrong_SD_card"" Value="""" Type=""Status"" Byte=""5"" Bit=""5"">
        <Desc>Wrong SD card</Desc>
      </Res>
      <Res Name=""Deregistered"" Value="""" Type=""Status"" Byte=""5"" Bit=""6"">
        <Desc>Deregistered</Desc>
      </Res>
      <Res Name=""No_SIM_card"" Value="""" Type=""Status"" Byte=""6"" Bit=""0"">
        <Desc>No SIM card</Desc>
      </Res>
      <Res Name=""No_GPRS_Modem"" Value="""" Type=""Status"" Byte=""6"" Bit=""1"">
        <Desc>No GPRS Modem</Desc>
      </Res>
      <Res Name=""No_mobile_operator"" Value="""" Type=""Status"" Byte=""6"" Bit=""2"">
        <Desc>No mobile operator</Desc>
      </Res>
      <Res Name=""No_GPRS_service"" Value="""" Type=""Status"" Byte=""6"" Bit=""3"">
        <Desc>No GPRS service</Desc>
      </Res>
      <Res Name=""Near_end_of_paper"" Value="""" Type=""Status"" Byte=""6"" Bit=""4"">
        <Desc>Near end of paper</Desc>
      </Res>
      <Res Name=""CM_error"" Value="""" Type=""Status"" Byte=""6"" Bit=""6"">
        <Desc>CM error</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<StatusBytes[7]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDepartmentName"" CmdByte=""0x67"">
    <FPOperation>Read data for the state department number and name</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['2']> <;> <Number[2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Res>
      <Res Name=""Name"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters department name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Number[2]> <;> <Name[23]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""OpenReceipt"" CmdByte=""0x30"">
    <FPOperation>Opens a fiscal receipt assigned to the specified operator</FPOperation>
    <Args>
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbol from 1 to 20 corresponding to operator's number</Desc>
      </Arg>
      <Arg Name=""OperPass"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols for operator's password</Desc>
      </Arg>
      <Arg Name=""reserved"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionPrintType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Postponed printing"" Value=""2"" />
          <Option Name=""Step by step printing"" Value=""0"" />
        </Options>
        <Desc>1 symbol with value 
 - '0' - Step by step printing 
 - '2' - Postponed printing</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]>  <;> < reserved['1']> <;> <reserved['0']> <;> <PrintType[1]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetDateTime"" CmdByte=""0x48"">
    <FPOperation>Sets the date and time and prints out the current values.</FPOperation>
    <Args>
      <Arg Name=""DateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yy HH:mm:ss"">
        <Desc>Date Time parameter in format: DD-MM-YY HH:MM:SS</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <DateTime ""DD-MM-YY HH:MM:SS""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgDecimalPointPosition"" CmdByte=""0x43"">
    <FPOperation>Stores a block containing the number format into the fiscal memory. Print the current status on the printer.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <Arg Name=""OptionDecimalPointPosition"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Fractions"" Value=""2"" />
          <Option Name=""Whole numbers"" Value=""0"" />
        </Options>
        <Desc>1 symbol with values: 
 - '0'- Whole numbers 
 - '2' - Fractions</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <DecimalPointPosition[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTotalFiscalSums"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the total fiscal accumulative sums from sales</FPOperation>
    <Args>
      <Arg Name="""" Value=""7"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'7'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""7"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""SumSalesTurnover"" Value="""" Type=""Text"" MaxLen=""14"">
        <Desc>14 s. for total grand sum of sales turnover from fiscal registration</Desc>
      </Res>
      <Res Name=""SumSalesVAT"" Value="""" Type=""Text"" MaxLen=""14"">
        <Desc>14 s. for total VAT sum of sales from fiscal registration</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'7'> <;> <SumSalesTurnover[14]> <;> <SumSalesVAT[14]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadPLUprice"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the price and price type of the specified article.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option['4']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""4"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>1..10 symbols for article price</Desc>
      </Res>
      <Res Name=""OptionPrice"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Free price is disable valid only programmed price"" Value=""0"" />
          <Option Name=""Free price is enable"" Value=""1"" />
          <Option Name=""Limited price"" Value=""2"" />
        </Options>
        <Desc>1 byte for Price flag with next value: 
 - '0'- Free price is disable valid only programmed price 
 - '1'- Free price is enable 
 - '2'- Limited price</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]><;><Option['4']><;><Price[1..10]><;><OptionPrice[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyReturnedAmounts"" CmdByte=""0x6F"">
    <FPOperation>Read information about the amounts returned</FPOperation>
    <Args>
      <Arg Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's 
number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'6'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales by cash</Desc>
      </Res>
      <Res Name=""AmountPaymentOthers"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for amount received from sales by others payment</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'6'> <;> <OperNum[1..2]> <;> <AmountPayment[1..11]> <;> <AmountPaymentOthers[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadOperatorNamePassword"" CmdByte=""0x6A"">
    <FPOperation>Provides information about an operator's name and password.</FPOperation>
    <Args>
      <Arg Name=""Number"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbol from 1 to 20 corresponding to the number of operator</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Number[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Number"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbol from 1 to 20 corresponding to the number of operator</Desc>
      </Res>
      <Res Name=""Name"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for operator's name</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbols for operator's password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Number[1..2]> <;> <Name[20]> <;> <Password[4]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyCountersByOperator"" CmdByte=""0x6F"">
    <FPOperation>Read the last operator's report number and date and time.</FPOperation>
    <Args>
      <Arg Name="""" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to 
operator's number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'5'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""5"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""WorkOperatorsCounter"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of the work operators</Desc>
      </Res>
      <Res Name=""LastOperatorReportDateTime"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>16 symbols for date and time of the last operator's report in 
format DD-MM-YYYY HH:MM</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'5'> <;> <OperNum[1..2]> <;> <WorkOperatorsCounter[1..5]> <;> <LastOperatorReportDateTime ""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadPayments"" CmdByte=""0x64"">
    <FPOperation>Provides information about all programmed payment types.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""NamePaym0"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for type 0 of payment name</Desc>
      </Res>
      <Res Name=""NamePaym1"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for type 1 of payment name</Desc>
      </Res>
      <Res Name=""NamePaym2"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for type 2 of payment name</Desc>
      </Res>
      <Res Name=""NamePaym3"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for type 3 of payment name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<NamePaym0[10]> <;> <NamePaym1[10]> <;> <NamePaym2[10]> <;> <NamePaym3[10]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPayment"" CmdByte=""0x44"">
    <FPOperation>Program the name of the payment types.</FPOperation>
    <Args>
      <Arg Name=""OptionPaymentNum"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Payment 0"" Value=""0"" />
          <Option Name=""Payment 1"" Value=""1"" />
          <Option Name=""Payment 2"" Value=""2"" />
          <Option Name=""Payment 3"" Value=""3"" />
          <Option Name=""Payment 4"" Value=""4"" />
        </Options>
        <Desc>1 symbol for payment type: 
 - '0' - Payment 0 
 - '1' - Payment 1 
 - '2' - Payment 2 
 - '3' - Payment 3 
 - '4' - Payment 4</Desc>
      </Arg>
      <Arg Name=""Name"" Value="""" Type=""Text"" MaxLen=""10"">
        <Desc>10 symbols for payment type name</Desc>
      </Arg>
      <Arg Name=""Rate"" Value="""" Type=""Decimal_with_format"" MaxLen=""10"" Format=""0000.00000"">
        <Desc>10 symbols for exchange rate in format: ####.#####  
of the 5
th
 payment type.</Desc>
        <Meta MinLen=""10"" Compulsory=""false"" ValIndicatingPresence="";"" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <PaymentNum[1]> <;> <Name[10]> { <;> <Rate[10]> } ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintDiagnostics"" CmdByte=""0x22"">
    <FPOperation>Prints out a diagnostic receipt.</FPOperation>
  </Command>
  <Command Name=""ProgFooter"" CmdByte=""0x49"">
    <FPOperation>Program the contents of a footer lines.</FPOperation>
    <Args>
      <Arg Name=""OptionFooterLine"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Footer 1"" Value=""F1"" />
          <Option Name=""Footer 2"" Value=""F2"" />
          <Option Name=""Footer 3"" Value=""F3"" />
        </Options>
        <Desc>2 symbol with value: 
-'F1' - Footer 1 
-'F2' - Footer 2 
-'F3' - Footer 3</Desc>
      </Arg>
      <Arg Name=""FooterText"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength symbols for footer line</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<OptionFooterLine[2]> <;> <FooterText[TextLength]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintLastReceiptDuplicate"" CmdByte=""0x3A"">
    <FPOperation>Print a copy of the last receipt document issued</FPOperation>
  </Command>
  <Command Name=""SetGPRS_Password"" CmdByte=""0x4E"">
    <FPOperation>Program device's GPRS password. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the GPRS password len</Desc>
      </Arg>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'P'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SoftwareReset"" CmdByte=""0x3F"">
    <FPOperation>Restore default parameters of the device.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6-symbols string</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTCP_Password"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's TCP password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'Z'> <;> <'1'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the TCP password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'Z'> <;> <'1'> <;> <PassLength[1..3]> <;> <Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgVATrates"" CmdByte=""0x42"">
    <FPOperation>Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>6 symbols string</Desc>
      </Arg>
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""reserved"" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""VATrateC"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate C from 6 symbols in format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateD"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate D from 6 symbols in format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateE"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate E from 6 symbols in format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateF"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate F from 6 symbols in format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateG"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate G from 6 symbols in format ##.##</Desc>
      </Arg>
      <Arg Name=""VATrateH"" Value="""" Type=""Decimal_with_format"" MaxLen=""6"" Format=""00.00"">
        <Desc>Value of VAT rate H from 6 symbols in format ##.##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <;> <reserved['0']><;>< reserved['0'] ><;> <VATrateC[1..6]> <;> <VATrateD[1..6]> <;> <VATrateE[1..6]> <;> < VATrateF[1..6]><;> < VATrateG[1..6]> <;> < VATrateH[1..6]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetBluetooth_Status"" CmdByte=""0x4E"">
    <FPOperation>Program device's Bluetooth module to be enabled or disabled.</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionBTstatus"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Disabled 
 - '1' - Enabled</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'B'> <;> <'S'> <;> <BTstatus[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadEJByDate"" CmdByte=""0x7C"">
    <FPOperation>Read Electronic Journal Report from Report initial date to report Final date.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J0"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<'J0'> <;> <'D'> <;> <StartRepFromDate""DDMMYY""> <;> <EndRepFromDate""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ReadPLUbarcode"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the barcode of the specified article.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option['3']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number with leading zeroes in format #####</Desc>
      </Res>
      <Res Name=""Option"" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""Barcode"" Value="""" Type=""Text"" MaxLen=""13"">
        <Desc>13 symbols for article barcode</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<PLUNum[5]><;><Option['3']><;><Barcode[13]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadServerPasswordECRS"" CmdByte=""0x4E"">
    <FPOperation>Provides information about the ECR's password</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Q"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'S'> <;> <'Q'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Q"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ParamLength"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Up to 2 symbols for parameter length</Desc>
      </Res>
      <Res Name=""ServerPassword"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>Up to 64 symbols for server password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'S'> <;> <'Q'> <;> <ParamLength[1..2]> <;> <ServerPassword[64]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgDepartment"" CmdByte=""0x47"">
    <FPOperation>Set data for the state department number from the internal FD database.</FPOperation>
    <Args>
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <Arg Name=""Name"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters department name</Desc>
      </Arg>
      <Arg Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Arg>
      <Arg Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for department price</Desc>
      </Arg>
      <Arg Name=""FlagsPrice"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>1 symbol with value: 
Flags.7=1 
Flags.6=0 
Flags.5=0 
Flags.4=0 
Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Number[2]> <;> <Name[23]> <;> <OptionVATClass[1]> <;> <Price[1..10]> <;> <FlagsPrice[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintEJByZBlocks"" CmdByte=""0x7C"">
    <FPOperation>Print or store Electronic Journal Report from by number of Z report blocks.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J1"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for initial number report in format ####</Desc>
      </Arg>
      <Arg Name=""EndZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for final number report in format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'J1'> <;> <'Z'> <;> <StartZNum[4]> <;> <EndZNum[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""SetIdle_Timeout"" CmdByte=""0x4E"">
    <FPOperation>Sets device's idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - 4Eh / N - Save network settings</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""I"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""IdleTimeout"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for Idle timeout in format ####</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'Z'> <;> <'I'> <;> <IdleTimeout[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTCP_AutoStartStatus"" CmdByte=""0x4E"">
    <FPOperation>Read device TCP Auto Start status</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'Z'> <;> <'2'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionTCPAutoStart"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for TCP auto start status 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'Z'> <;> <'2'> <;> <TCPAutoStart[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgramTempLanguage"" CmdByte=""0x4F"">
    <FPOperation>Program the language of the device</FPOperation>
    <Args>
      <Arg Name="""" Value=""l"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OptionLanguage"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Albanian"" Value=""0"" />
          <Option Name=""English"" Value=""2"" />
          <Option Name=""Serbian"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '0' - Albanian 
 - '1' - Serbian 
 - '2' - English</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'l'> <;> <'W'> <;> < Language[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintLogo"" CmdByte=""0x6C"">
    <FPOperation>Prints the programmed graphical logo with the stated number.</FPOperation>
    <Args>
      <Arg Name=""Number"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Number of logo to be printed. If missing prints logo with number 0</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Number[1..2]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintEJByDate"" CmdByte=""0x7C"">
    <FPOperation>Printing Electronic Journal Report from Report initial date to report Final date.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J1"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndRepFromDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<'J1'> <;> <'D'> <;> <StartRepFromDate""DDMMYY""> <;> <EndRepFromDate""DDMMYY""> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailyGeneralRegistersByOperator"" CmdByte=""0x6F"">
    <FPOperation>Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.</FPOperation>
    <Args>
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'1'><;><OperNum[1..2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from 1 to 20 corresponding to operator's number</Desc>
      </Res>
      <Res Name=""FiscalReciept"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for daily number of fiscal receipts</Desc>
      </Res>
      <Res Name=""DiscountsNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of discounts</Desc>
      </Res>
      <Res Name=""DiscountsAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of discounts</Desc>
      </Res>
      <Res Name=""AdditionsNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of additions</Desc>
      </Res>
      <Res Name=""AdditionsAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of additions</Desc>
      </Res>
      <Res Name=""RefundNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of refunds</Desc>
      </Res>
      <Res Name=""RefundAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of refunds</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'1'><;><OperNum[1..2]> <;> < FiscalReciept [1..5]> <;> <DiscountsNum[1..5]> <;> <DiscountsAmount[1..11]> <;> <AdditionsNum[1..5]> <;> <AdditionsAmount[1..11]> <;><RefundNum[1..5]> <;> <RefundAmount[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadGPRS_Password"" CmdByte=""0x4E"">
    <FPOperation>Provides information about device's GPRS password.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'G'><;><'P'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""PassLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the GPRS password length</Desc>
      </Res>
      <Res Name=""Password"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS password</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'G'><;><'P'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""PrintDailyReport"" CmdByte=""0x7C"">
    <FPOperation>Depending on the parameter prints:  âˆ’ daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print ('Z'); âˆ’ daily fiscal report without zeroing ('X');</FPOperation>
    <Args>
      <Arg Name=""OptionZeroing"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Without zeroing"" Value=""X"" />
          <Option Name=""Zeroing"" Value=""Z"" />
        </Options>
        <Desc>1 character with following values: 
 - 'Z' - Zeroing 
 - 'X' - Without zeroing</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""CloseTaxiReceipt"" CmdByte=""0x38"">
    <FPOperation>Close the taxi fiscal receipt.</FPOperation>
    <Args>
      <Arg Name=""TAXIcount"" Value="""" Type=""Decimal"" MaxLen=""16"">
        <Desc>Symbols from 1 to 16 corresponding to taxi counter</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ < TAXIcount[1..16]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ProgExtDisplay"" CmdByte=""0x46"">
    <FPOperation>Programs the external display.</FPOperation>
    <Args>
      <Arg Name=""Password"" Value="""" Type=""Text"" MaxLen=""6"">
        <Desc>A 6-symbol string</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Password[6]> <NumBytesCom1line[1]> <Com1line[8]> <NumBytesCom2line[1]> <Com2Line[8]> < NumBytesClrDis[1]> <ComClrDis[8]> <NumbytesXtrCom[1]> <ComXtrCom[1]> <FlagPrecod[1]> {<PrecodTabl[64]>} ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadFooter"" CmdByte=""0x69"">
    <FPOperation>Provides the content of the footer lines.</FPOperation>
    <Args>
      <Arg Name=""OptionFooterLine"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Footer 1"" Value=""F1"" />
          <Option Name=""Footer 2"" Value=""F2"" />
          <Option Name=""Footer 3"" Value=""F3"" />
        </Options>
        <Desc>1 symbol with value: 
 - 'F1' - Footer 1 
 - 'F2' - Footer 2 
 - 'F3' - Footer 3</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionFooterLine[2]> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""OptionFooterLine"" Value="""" Type=""Option"" MaxLen=""2"">
        <Options>
          <Option Name=""Footer 1"" Value=""F1"" />
          <Option Name=""Footer 2"" Value=""F2"" />
          <Option Name=""Footer 3"" Value=""F3"" />
        </Options>
        <Desc>(Line Number)1 symbol with value: 
 - 'F1' - Footer 1 
 - 'F2' - Footer 2 
 - 'F3' - Footer 3</Desc>
      </Res>
      <Res Name=""FooterText"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>TextLength symbols for footer line</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<OptionFooterLine[2]> <;> <FooterText[TextLength]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""CashPayCloseTaxiReceipt"" CmdByte=""0x36"">
    <FPOperation>Paying the exact amount in cash and close the fiscal receipt.</FPOperation>
    <Args>
      <Arg Name=""TAXIcount"" Value="""" Type=""Decimal"" MaxLen=""16"">
        <Desc>Symbols from 1 to 16 corresponding to taxi counter</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <TAXIcount[1..16]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""PrintEJByZBlocksWithoutReceipts"" CmdByte=""0x7C"">
    <FPOperation>Print or store Electronic Journal Report from by number of Z report blocks of current receipt.</FPOperation>
    <Args>
      <Arg Name="""" Value=""J1"" Type=""OptionHardcoded"" MaxLen=""2"" />
      <Arg Name="""" Value=""Z"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""StartZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for initial number report in format ####</Desc>
      </Arg>
      <Arg Name=""EndZNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>4 symbols for final number report in format ####</Desc>
      </Arg>
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'J1'> <;> <'Z'> <;> <StartZNum[4]> <;> <EndZNum[4]> <;><'D'> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""OpenNonFiscalReceipt"" CmdByte=""0x2E"">
    <FPOperation>Opens a non-fiscal receipt assigned to the specified operator</FPOperation>
    <Args>
      <Arg Name=""OperNum"" Value="""" Type=""Decimal"" MaxLen=""2"">
        <Desc>Symbols from '1' to '20' corresponding to operator's number</Desc>
      </Arg>
      <Arg Name=""OperPass"" Value="""" Type=""Text"" MaxLen=""4"">
        <Desc>4 symbols for operator's password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ < OperNum[1..2]> <;> < OperPass[4]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadECRprofileActiveDate"" CmdByte=""0x4E"">
    <FPOperation>Provides information about active profile date - date from which the account is valid or date from which we return to account 1 in case of mReset.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'><;><'S'><;><'D'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ProfileActiveDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyyyy"">
        <Desc>(Profile active date) 8 symbols in format DDMMYYYY</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'><;><'S'><;><'D'><;><ProfileActiveDate ""DDMMYYYY"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""Subtotal"" CmdByte=""0x33"">
    <FPOperation>Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.</FPOperation>
    <Args>
      <Arg Name=""OptionPrinting"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Arg>
      <Arg Name=""OptionDisplay"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Arg>
      <Arg Name=""DiscAddV"" Value="""" Type=""Decimal"" MaxLen=""8"">
        <Desc>Up to 8 symbols for the value of the 
discount/addition. Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="":"" />
      </Arg>
      <Arg Name=""DiscAddP"" Value="""" Type=""Decimal"" MaxLen=""7"">
        <Desc>Up to 7 symbols for the percentage value of the 
discount/addition. Use minus sign '-' for discount</Desc>
        <Meta MinLen=""1"" Compulsory=""false"" ValIndicatingPresence="","" />
      </Arg>
      <ArgsFormatRaw><![CDATA[ <OptionPrinting[1]> <;> <OptionDisplay[1]> {<':'> <DiscAddV[1..8]>} {<','> <DiscAddP[1..7]>} ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""SubtotalValue"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for the value of the subtotal amount</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<SubtotalValue[1..10]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDailyRA"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the RA amounts by type of payment and the total number of operations.</FPOperation>
    <Args>
      <Arg Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'2'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""2"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for RA amounts</Desc>
      </Res>
      <Res Name=""NumRA"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for the total number of operations</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'2'> <;> <AmountPayment[1..11]> <;> <NumRA[1..5]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadGeneralDailyRegisters"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.</FPOperation>
    <Args>
      <Arg Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'1'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""FiscalReciept"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>1..5 symbols for daily number of fiscal receipts</Desc>
      </Res>
      <Res Name=""DiscountsNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of discounts</Desc>
      </Res>
      <Res Name=""DiscountsAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of discounts</Desc>
      </Res>
      <Res Name=""AdditionsNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of additions</Desc>
      </Res>
      <Res Name=""AdditionsAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of additions</Desc>
      </Res>
      <Res Name=""RefundNum"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for number of refunds</Desc>
      </Res>
      <Res Name=""RefundAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated amount of refund operation</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'1'> <;> < FiscalReciept [1..5]> <;> <DiscountsNum[1..5]> <;> <DiscountsAmount[1..11]> <;> <AdditionsNum[1..5]> <;> <AdditionsAmount[1..11]> <;><RefundNum[1..5]> <;><RefundAmount[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetActiveLogo"" CmdByte=""0x23"">
    <FPOperation>Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.</FPOperation>
    <Args>
      <Arg Name=""LogoNumber"" Value="""" Type=""Text"" MaxLen=""1"">
        <Desc>1 character value from '0' to '9' or '?'. The number sets the active logo 
number, and the '?' invokes only printing of information</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <LogoNumber[1]>  ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDisplayGreetingMessage"" CmdByte=""0x69"">
    <FPOperation>Provide information about the display greeting message.</FPOperation>
    <Args>
      <Arg Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'0'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""DisplayGreetingText"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for greeting message</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'0'> <;> <DisplayGreetingText[20]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetServerPasswordECRS"" CmdByte=""0x4E"">
    <FPOperation>Program ECRS password</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""Q"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""ParamLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 2 symbols for parameter length</Desc>
      </Arg>
      <Arg Name=""ServerPassword"" Value="""" Type=""Text"" MaxLen=""64"">
        <Desc>Up to 64 symbols for server password</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'> <;> <'S'> <;> <'Q'> <;> <ParamLength[1..3]> <;> <ServerPassword[64]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadExternalDisplay"" CmdByte=""0x57"">
    <FPOperation>Select type of display</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <Option['E']>  ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Option"" Value=""E"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionExternalType"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Others"" Value=""0"" />
          <Option Name=""Tremol display"" Value=""1"" />
        </Options>
        <Desc>1 symbol with value: 
 -'1' -Tremol display 
 -'0' - Others</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Option['E']> <;> <ExternalType[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadBluetooth_Status"" CmdByte=""0x4E"">
    <FPOperation>Providing information about if the device's Bluetooth module is enabled or disabled.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'B'> <;> <'S'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""B"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""S"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionBTstatus"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Disabled"" Value=""0"" />
          <Option Name=""Enabled"" Value=""1"" />
        </Options>
        <Desc>(Status) 1 symbol with value: 
 - '0' - Disabled 
 - '1' - Enabled</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'B'> <;> <'S'> <;> <BTstatus[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""SetGPRS_Username"" CmdByte=""0x4E"">
    <FPOperation>Program device's GPRS user name. To apply use - SaveNetworkSettings()</FPOperation>
    <Args>
      <Arg Name="""" Value=""P"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""G"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""U"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""GPRS_Username_Len"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>Up to 3 symbols for the username len</Desc>
      </Arg>
      <Arg Name=""Username"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>Up to 100 symbols for the device's GPRS username</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <'P'><;><'G'><;><'U'><;><GPRS_Username_Len[1..3]><;><Username[100]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadTaxiServiceGeneral"" CmdByte=""0x6B"">
    <FPOperation>Provides information about the general registers of the specified.</FPOperation>
    <Args>
      <Arg Name=""ServiceNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols for service number: ##</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ < ServiceNum [2]> <;> <Option['1']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""ServiceNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols for service number with leading zeroes in format: ##</Desc>
      </Res>
      <Res Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""ServiceNameAL"" Value="""" Type=""Text"" MaxLen=""30"">
        <Desc>30 symbols for service name in Albanian</Desc>
      </Res>
      <Res Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Res>
      <Res Name=""TurnoverAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for taxi service turnover</Desc>
      </Res>
      <Res Name=""SoldQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for Sales quantity of the taxi service</Desc>
      </Res>
      <ResFormatRaw><![CDATA[< ServiceNum [2]> <;> <Option['1']> <;> < ServiceNameAL[30]> <;> ServiceNameSR[30]> <;> ServiceNameEN[30]> <;> <OptionVATClass[1]> <;> <TurnoverAmount[1..11]> <;> <SoldQuantity[1..11]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ProgPLUNameDifferent"" CmdByte=""0x4B"">
    <FPOperation>Program the price for a certain article and specific name.</FPOperation>
    <Args>
      <Arg Name=""PLUNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>5 symbols for article number in format: #####</Desc>
      </Arg>
      <Arg Name=""Option"" Value=""6"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""PLUNameAlbanian"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for Albanian PLU</Desc>
      </Arg>
      <Arg Name=""PLUNameSerbian"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for Serbian PLU</Desc>
      </Arg>
      <Arg Name=""PLUNameEnglish"" Value="""" Type=""Text"" MaxLen=""32"">
        <Desc>32 symbols for English PLU</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<PLUNum[5]><;><Option['6']><;><PLUNameAlbanian[32]><;> <PLUNameSerbian[32]><;>< PLUNameEnglish[32]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDeviceModuleSupport"" CmdByte=""0x4E"">
    <FPOperation>Provide an information about modules supported by the device.</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'D'> <;> <'D'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""D"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""OptionLAN"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for LAN support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionWiFi"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for WiFi support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionGPRS"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>1 symbol for GPRS support 
 - '0' - No 
 - '1' - Yes 
BT (Bluetooth) 1 symbol for Bluetooth support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <Res Name=""OptionBT"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Bluetooth) 1 symbol for Bluetooth support 
 - '0' - No 
 - '1' - Yes</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'D'> <;> <'D'> <;> <LAN[1]> <;> <WiFi[1]> <;> <GPRS[1]> <;> <BT[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadWiFi_NetworkName"" CmdByte=""0x4E"">
    <FPOperation>Read device's connected WiFi network name</FPOperation>
    <Args>
      <Arg Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'R'> <;> <'W'> <;> <'N'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""R"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""W"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name="""" Value=""N"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""WiFiNameLength"" Value="""" Type=""Decimal"" MaxLen=""3"">
        <Desc>(Length) Up to 3 symbols for the WiFi name length</Desc>
      </Res>
      <Res Name=""WiFiNetworkName"" Value="""" Type=""Text"" MaxLen=""100"">
        <Desc>(Name) Up to 100 symbols for the device's WiFi network name</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'R'> <;> <'W'> <;> <'N'> <;> <WiFiNameLength[1..3]> <;> <WiFiNetworkName[100]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadParameters"" CmdByte=""0x65"">
    <FPOperation>Provides information about the programmed number of POS and the current values of the logo, cutting permission, display mode, enable/disable currency in receipt.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""POSNum"" Value="""" Type=""Decimal_with_format"" MaxLen=""4"" Format=""0000"">
        <Desc>(POS Number) 4 symbols for number of POS in format ####</Desc>
      </Res>
      <Res Name=""OptionPrintLogo"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Print Logo) 1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Res>
      <Res Name=""OptionAutoOpenDrawer"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Auto Open Drawer) 1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Res>
      <Res Name=""OptionAutoCut"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""No"" Value=""0"" />
          <Option Name=""Yes"" Value=""1"" />
        </Options>
        <Desc>(Auto Cut) 1 symbol of value: 
 - '1' - Yes 
 - '0' - No</Desc>
      </Res>
      <Res Name=""OptionExternalDispManagement"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""Auto"" Value=""0"" />
          <Option Name=""Manual"" Value=""1"" />
        </Options>
        <Desc>(External Display Management) 1 symbol of value: 
 - '1' - Manual 
 - '0' - Auto</Desc>
      </Res>
      <Res Name=""OptionWorkOperatorCount"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""More"" Value=""0"" />
          <Option Name=""One"" Value=""1"" />
        </Options>
        <Desc>(Work Operator Count) 1 symbol of value: 
 - '1' - One 
 - '0' - More</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<POSNum[4]> <;> <PrintLogo[1]> <;> <AutoOpenDrawer[1]> <;> <AutoCut[1]> <;> <ExternalDispManagement[1]> <;> <WorkOperatorCount[1]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadVersion"" CmdByte=""0x21"">
    <FPOperation>Provides information about the device model and version.</FPOperation>
    <Response ACK=""false"">
      <Res Name=""Model"" Value="""" Type=""Text"" MaxLen=""50"">
        <Desc>Up to 50 symbols for Model name</Desc>
      </Res>
      <Res Name=""Version"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>Up to 20 symbols for Version name and Check sum</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Model[50]> <;> <Version[20]>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""RawWrite"" CmdByte=""0xFE"">
    <FPOperation> Writes raw bytes to FP </FPOperation>
    <Args>
      <Arg Name=""Bytes"" Value="""" Type=""Base64"" MaxLen=""5000"">
        <Desc>The bytes in BASE64 ecoded string to be written to FP</Desc>
      </Arg>
    </Args>
  </Command>
  <Command Name=""CashPayCloseReceipt"" CmdByte=""0x36"">
    <FPOperation>Paying the exact amount in cash and close the fiscal receipt.</FPOperation>
  </Command>
  <Command Name=""ProgDisplayGreetingMessage"" CmdByte=""0x49"">
    <FPOperation>Program the contents of a Display Greeting message.</FPOperation>
    <Args>
      <Arg Name="""" Value=""0"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""DisplayGreetingText"" Value="""" Type=""Text"" MaxLen=""20"">
        <Desc>20 symbols for Display greeting message</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[<'0'> <;> <DisplayGreetingText[20]> ]]></ArgsFormatRaw>
    </Args>
  </Command>
  <Command Name=""ReadDailyPO"" CmdByte=""0x6E"">
    <FPOperation>Provides information about the PO amounts by type of payment and the total number of operations.</FPOperation>
    <Args>
      <Arg Name="""" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <'3'> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name="""" Value=""3"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Res Name=""AmountPayment"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for PO amount by type of payment</Desc>
      </Res>
      <Res Name=""NumPO"" Value="""" Type=""Decimal"" MaxLen=""5"">
        <Desc>Up to 5 symbols for the total number of operations</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<'3'> <;> <AmountPayment[1..11]> <;> <NumPO[1..5]> <;>]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadDepartmentOption1"" CmdByte=""0x67"">
    <FPOperation>Read data for the state department number from the internal FD database.</FPOperation>
    <Args>
      <Arg Name=""Option"" Value=""1"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <Arg Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Arg>
      <ArgsFormatRaw><![CDATA[ <Option['1']> <;> <Number[2]>  ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""false"">
      <Res Name=""Number"" Value="""" Type=""Decimal_with_format"" MaxLen=""2"" Format=""00"">
        <Desc>2 symbols department number in format ##</Desc>
      </Res>
      <Res Name=""Name"" Value="""" Type=""Text"" MaxLen=""23"">
        <Desc>23 characters department name</Desc>
      </Res>
      <Res Name=""OptionVATClass"" Value="""" Type=""Option"" MaxLen=""1"">
        <Options>
          <Option Name=""VAT Class A"" Value=""A"" />
          <Option Name=""VAT Class B"" Value=""B"" />
          <Option Name=""VAT Class C"" Value=""C"" />
          <Option Name=""VAT Class D"" Value=""D"" />
          <Option Name=""VAT Class E"" Value=""E"" />
          <Option Name=""VAT Class F"" Value=""F"" />
          <Option Name=""VAT Class G"" Value=""G"" />
          <Option Name=""VAT Class H"" Value=""H"" />
        </Options>
        <Desc>1 character for article VAT Class: 
 - 'A' - VAT Class A 
 - 'B' - VAT Class B 
 - 'C' - VAT Class C 
 - 'D' - VAT Class D 
 - 'E' - VAT Class E 
 - 'F' - VAT Class F 
 - 'G' - VAT Class G 
 - 'H' - VAT Class H</Desc>
      </Res>
      <Res Name=""Price"" Value="""" Type=""Decimal"" MaxLen=""10"">
        <Desc>Up to 10 symbols for department price</Desc>
      </Res>
      <Res Name=""FlagsPrice"" Value="""" Type=""Flags"" MaxLen=""1"">
        <Desc>(Setting price, type of goods) 1 symbol with value: 
Flags.7=1 
Flags.6=0 
Flags.5=0 
Flags.4=0 
Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
Flags.0=1 Yes, Flags.0=0 No (Free price enabled)</Desc>
      </Res>
      <Res Name=""Turnover"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated turnover of the department</Desc>
      </Res>
      <Res Name=""SoldQuantity"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for sold quantity of the department</Desc>
      </Res>
      <Res Name=""RefundAmount"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated refund amount of the department</Desc>
      </Res>
      <Res Name=""RefundQTY"" Value="""" Type=""Decimal"" MaxLen=""11"">
        <Desc>Up to 11 symbols for accumulated refund quantity of department</Desc>
      </Res>
      <Res Name=""LastZReportNumber"" Value="""" Type=""Decimal_with_format"" MaxLen=""5"" Format=""00000"">
        <Desc>Up to 5 symbols for the number of last Z report in format #####</Desc>
      </Res>
      <Res Name=""LastZReportDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""dd-MM-yyyy HH:mm"">
        <Desc>16 symbols for the date and hour in last Z report</Desc>
      </Res>
      <ResFormatRaw><![CDATA[<Number[2]> <;> <Name[23]> <;> <OptionVATClass[1]> <;> <Price[1..10]> <;> <FlagsPrice[1]> <;> <Turnover[1..11]> <;> <SoldQuantity[1..11]> <;> <RefundAmount[1..11]> <;> <RefundQTY[1..11]> <;> <LastZReportNumber[1..5]> <;> <LastZReportDate""DD-MM-YYYY HH:MM"">]]></ResFormatRaw>
    </Response>
  </Command>
  <Command Name=""ReadBriefFMReportByDate"" CmdByte=""0x7B"">
    <FPOperation>Store a brief FM report by initial and end date.</FPOperation>
    <Args>
      <Arg Name=""StartDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""PCStorage"" Value=""8"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <StartDate ""DDMMYY""><;><EndDate ""DDMMYY""> <;><PCStorage['8']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
  <Command Name=""ReadDetailedFMReportByDate"" CmdByte=""0x7A"">
    <FPOperation>Storage a detailed FM report by initial and end date.</FPOperation>
    <Args>
      <Arg Name=""StartDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for initial date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""EndDate"" Value="""" Type=""DateTime"" MaxLen=""10"" Format=""ddMMyy"">
        <Desc>6 symbols for final date in the DDMMYY format</Desc>
      </Arg>
      <Arg Name=""PCStorage"" Value=""8"" Type=""OptionHardcoded"" MaxLen=""1"" />
      <ArgsFormatRaw><![CDATA[ <StartDate ""DDMMYY""><;><EndDate ""DDMMYY""> <;><PCStorage['8']> ]]></ArgsFormatRaw>
    </Args>
    <Response ACK=""true"" ACK_PLUS=""true"" />
  </Command>
</Defs>";
#endregion

     }

               public enum OptionZeroing
               {
                  Without_zeroing = 'X',
                  Zeroing = 'Z'
               }

               public enum OptionDecimalPointPosition
               {
                  Fractions = '2',
                  Whole_numbers = '0'
               }

               public enum OptionPrintLogo
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionAutoOpenDrawer
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionAutoCut
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionExternalDispManagement
               {
                  Auto = '0',
                  Manual = '1'
               }

               public enum OptionWorkOperatorCount
               {
                  More = '0',
                  One = '1'
               }

               public enum OptionVATClass
               {
                  VAT_Class_A = 'A',
                  VAT_Class_B = 'B',
                  VAT_Class_C = 'C',
                  VAT_Class_D = 'D',
                  VAT_Class_E = 'E',
                  VAT_Class_F = 'F',
                  VAT_Class_G = 'G',
                  VAT_Class_H = 'H'
               }

               public enum OptionLineSymbols
               {
                  Symbols_per_line_32 = '0',
                  Symbols_per_line_48 = '1'
               }

               public enum OptionCommunicationModule
               {
                  GSM = '0',
                  LAN = '1'
               }

               public enum OptionSign
               {
                  Correction = '-',
                  Sale = '+'
               }

               public enum OptionLanguage
               {
                  Albanian = '0',
                  English = '2',
                  Serbian = '1'
               }

               public enum OptionPaymentType
               {
                  Card = '1',
                  Cash = '0',
                  Credit = '3',
                  Currency = '4',
                  Voucher = '2'
               }

               public enum OptionQuantityType
               {
                  Availability_of_PLU_stock_is_not_monitored = '0',
                  Disable_negative_quantity = '1',
                  Enable_negative_quantity = '2'
               }

               public enum OptionIsReceiptOpened
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionInitiatedPayment
               {
                  initiated_payment = '1',
                  not_initiated_payment = '0'
               }

               public enum OptionFinalizedPayment
               {
                  finalized_payment = '1',
                  not_finalized_payment = '0'
               }

               public enum OptionPowerDownInReceipt
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionChangeType
               {
                  Change_In_Cash = '0',
                  Change_In_Currency = '2',
                  Same_As_The_payment = '1'
               }

               public enum OptionExternalDisplay
               {
                  Others = '0',
                  Tremol_display = '1'
               }

               public enum OptionActivationRS
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionServiceMode
               {
                  Sales_mode = '0',
                  Service_mode = '1'
               }

               public enum OptionDhcpStatus
               {
                  Disabled = '0',
                  Enabled = '1'
               }

               public enum OptionPrice
               {
                  Free_price_is_disable_valid_only_programmed_price = '0',
                  Free_price_is_enable = '1',
                  Limited_price = '2'
               }

               public enum OptionAddressType
               {
                  DNS_address = '5',
                  Gateway_address = '4',
                  IP_address = '2',
                  Subnet_Mask = '3'
               }

               public enum OptionProfileType
               {
                  Profile_0 = '0',
                  Profile_1 = '1'
               }

               public enum OptionHeaderLine
               {
                  Header_1 = '1',
                  Header_2 = '2',
                  Header_3 = '3',
                  Header_4 = '4',
                  Header_5 = '5',
                  Header_6 = '6',
                  Header_7 = '7',
                  Header_8 = '8'
               }

               public enum OptionDiagnostics
               {
                  Crypto_modul = 'C',
                  FM = 'F',
                  SD_card = 'S'
               }

               public enum OptionTCPAutoStart
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionUsedModule
               {
                  LAN = '1',
                  WiFi = '2'
               }

               public enum OptionCodeType
               {
                  CODABAR = '6',
                  CODE_128 = 'I',
                  CODE_39 = '4',
                  CODE_93 = 'H',
                  EAN_13 = '2',
                  EAN_8 = '3',
                  ITF = '5',
                  UPC_A = '0',
                  UPC_E = '1'
               }

               public enum OptionCenter
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionLAN
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionWiFi
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionGPRS
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionBT
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionChange
               {
                  With_Change = '0',
                  Without_Change = '1'
               }

               public enum OptionSendAfterZ
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionPrintType
               {
                  Postponed_printing = '2',
                  Step_by_step_printing = '0'
               }

               public enum OptionPaymentNum
               {
                  Payment_0 = '0',
                  Payment_1 = '1',
                  Payment_2 = '2',
                  Payment_3 = '3',
                  Payment_4 = '4'
               }

               public enum OptionFooterLine
               {
                  /// <summary>
                  /// F1 - 12614
                  /// </summary>
                  Footer_1 = 12614,
                  /// <summary>
                  /// F2 - 12870
                  /// </summary>
                  Footer_2 = 12870,
                  /// <summary>
                  /// F3 - 13126
                  /// </summary>
                  Footer_3 = 13126
               }

               public enum OptionBTstatus
               {
                  Disabled = '0',
                  Enabled = '1'
               }

               public enum OptionPrinting
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionDisplay
               {
                  No = '0',
                  Yes = '1'
               }

               public enum OptionExternalType
               {
                  Others = '0',
                  Tremol_display = '1'
               }

         public class DailySaleAmountsByVATRes
         {
           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group A
           /// </summary>
           public string SalesAmountVATGr0 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group B
           /// </summary>
           public string SalesAmountVATGr1 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group C
           /// </summary>
           public string SalesAmountVATGr2 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group D
           /// </summary>
           public string SalesAmountVATGr3 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group E
           /// </summary>
           public string SalesAmountVATGr4 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group F
           /// </summary>
           public string SalesAmountVATGr5 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group G
           /// </summary>
           public string SalesAmountVATGr6 { get; set; }

           /// <summary>
           ///Up to 11 symbols for the sales amount accumulated by VAT group H
           /// </summary>
           public string SalesAmountVATGr7 { get; set; }
         }

         public class DepartmentRes
         {
           /// <summary>
           ///2 symbols for department number in format ##
           /// </summary>
           public decimal DepNum { get; set; }

           /// <summary>
           ///34 symbols for department name
           /// </summary>
           public string DepName { get; set; }

           /// <summary>
           ///1 character for VAT class attachment of the department: 
           ///  - 'A' - VAT Class A 
           ///  - 'B' - VAT Class B 
           ///  - 'C' - VAT Class C 
           ///  - 'D' - VAT Class D 
           ///  - 'E' - VAT Class E 
           ///  - 'F' - VAT Class F 
           ///  - 'G' - VAT Class G 
           ///  - 'H' - VAT Class H
           /// </summary>
           public OptionVATClass OptionVATClass { get; set; }

           /// <summary>
           ///1..11 symbols for Department price
           /// </summary>
           public decimal Price { get; set; }

           /// <summary>
           ///(Setting price, single transaction, type of goods) 1 symbol with value: 
           /// Flags.7=1 
           /// Flags.6=0 
           /// Flags.5=0 
           /// Flags.4=0 
           /// Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
           /// Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
           /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
           /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)
           /// </summary>
           public byte FlagsPrice { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated turnover of the department
           /// </summary>
           public decimal Turnover { get; set; }

           /// <summary>
           ///Up to 11 symbols for sold quantity of the department
           /// </summary>
           public decimal SoldQuantity { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated refund amount of the department
           /// </summary>
           public decimal RefundAmount { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated refund quantity of department
           /// </summary>
           public decimal RefundQTY { get; set; }

           /// <summary>
           ///Up to 5 symbols for the number of last Z report in format #####
           /// </summary>
           public decimal LastZReportNumber { get; set; }

           /// <summary>
           ///16 symbols for the date and hour in last Z report
           /// </summary>
           public DateTime LastZReportDate { get; set; }
         }

         public class DailyReturnedRes
         {
           /// <summary>
           ///Up to 11 symbols for amount received from sales change by cash
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales change by 
           /// others payment
           /// </summary>
           public decimal AmountPaymentOthers { get; set; }
         }

         public class FMfreeRecordsRes
         {
           /// <summary>
           ///4 symbols for the number of free records for Z-report in the FM 
           /// CS 4 symbols for FM MCU flash checksum
           /// </summary>
           public string FreeFMrecords { get; set; }

           /// <summary>
           ///4 symbols for FM MCU flash checksum
           /// </summary>
           public string CS { get; set; }

           /// <summary>
           ///Up to 3 symbols for resets in FM
           /// </summary>
           public decimal FreeResets { get; set; }

           /// <summary>
           ///Up to 2 symbols for headers changes in FM
           /// </summary>
           public decimal FreeHeaderChanges { get; set; }

           /// <summary>
           ///Up to 2 symbols for tax changes in FM
           /// </summary>
           public decimal FreeTaxChanges { get; set; }

           /// <summary>
           ///Up to 2 symbols for SD changes in FM
           /// </summary>
           public decimal FreeSDchanges { get; set; }

           /// <summary>
           ///Up to 3 symbols for registration changes in FM
           /// </summary>
           public decimal FreeRegistrationChanges { get; set; }
         }

         public class Bluetooth_PasswordRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the BT password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the BT password
           /// </summary>
           public string Password { get; set; }
         }

         public class DepartmentDifferentNameRes
         {
           /// <summary>
           ///2 symbols department number in format ##
           /// </summary>
           public decimal Number { get; set; }

           /// <summary>
           ///23 characters for Albanian name
           /// </summary>
           public string NameAlbanian { get; set; }

           /// <summary>
           ///23 characters Serbian name
           /// </summary>
           public string NameSerbian { get; set; }

           /// <summary>
           ///23 characters English name
           /// </summary>
           public string NameEnglish { get; set; }
         }

         public class GPRS_APNRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the APN length
           /// </summary>
           public decimal GPRS_APN_Len { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's GPRS APN
           /// </summary>
           public string APN { get; set; }
         }

         public class PLUqtyRes
         {
           /// <summary>
           ///5 symbols for article number with leading zeroes in format #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///Up to13 symbols for quantity in stock
           /// </summary>
           public decimal AvailableQuantity { get; set; }

           /// <summary>
           ///1 symbol for Quantity flag with next value:  
           /// - '0'- Availability of PLU stock is not monitored  
           /// - '1'- Disable negative quantity  
           /// - '2'- Enable negative quantity
           /// </summary>
           public OptionQuantityType OptionQuantityType { get; set; }
         }

         public class SerialAndFiscalNumsRes
         {
           /// <summary>
           ///11 symbols for individual number of the fiscal device
           /// </summary>
           public string SerialNumber { get; set; }

           /// <summary>
           ///11 symbols for individual number of the fiscal memory
           /// </summary>
           public string FMNumber { get; set; }

           /// <summary>
           ///24 symbols for ECR unique number
           /// </summary>
           public string ECR_UniqueNum { get; set; }
         }

         public class GPRS_UsernameRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the GPRS username length
           /// </summary>
           public decimal GPRS_User_Len { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's GPRS username
           /// </summary>
           public string Username { get; set; }
         }

         public class CMinfoRes
         {
           /// <summary>
           ///24 symbols for CM unique ID number
           /// </summary>
           public string CMUID { get; set; }

           /// <summary>
           ///Up to 16 symbols for FD/CM production date
           /// </summary>
           public DateTime ProductionDate { get; set; }

           /// <summary>
           ///Up to 16 symbols for FD/CM fiscalization date
           /// </summary>
           public DateTime ActivationDate { get; set; }

           /// <summary>
           ///10 symbols for coupled FD serial number 
           /// CS 4 symbols for CM MCU flash checksum
           /// </summary>
           public string FDSN { get; set; }

           /// <summary>
           ///4 symbols for CM MCU flash checksum
           /// </summary>
           public string CS { get; set; }
         }

         public class CurrentRecInfoRes
         {
           /// <summary>
           ///1 symbol with value: 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionIsReceiptOpened OptionIsReceiptOpened { get; set; }

           /// <summary>
           ///1 symbol with value '1'
           /// </summary>
           public string ReceiptType { get; set; }

           /// <summary>
           ///3 symbols for number of sales
           /// </summary>
           public string SalesNumber { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG0 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG1 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG2 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG3 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG4 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG5 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG6 { get; set; }

           /// <summary>
           ///11 symbols for subtotal from goods by VAT groups
           /// </summary>
           public string SubtotalVATG7 { get; set; }

           /// <summary>
           ///1 symbol with value: 
           ///  - '1' - initiated payment 
           ///  - '0' - not initiated payment
           /// </summary>
           public OptionInitiatedPayment OptionInitiatedPayment { get; set; }

           /// <summary>
           ///1 symbol with value: 
           ///  - '1' - finalized payment 
           ///  - '0' - not finalized payment
           /// </summary>
           public OptionFinalizedPayment OptionFinalizedPayment { get; set; }

           /// <summary>
           ///1 symbol with value: 
           /// - '0' - No 
           /// - '1' - Yes
           /// </summary>
           public OptionPowerDownInReceipt OptionPowerDownInReceipt { get; set; }

           /// <summary>
           ///Up to 11 symbols the amount of the due change in the stated payment 
           /// type
           /// </summary>
           public decimal ChangeAmount { get; set; }

           /// <summary>
           ///1 symbols with value: 
           ///  - '0' - Change In Cash 
           ///  - '1' - Same As The payment 
           ///  - '2' - Change In Currency
           /// </summary>
           public OptionChangeType OptionChangeType { get; set; }
         }

         public class ServerAddressRes
         {
           /// <summary>
           ///Up to 3 symbols for parameter length
           /// </summary>
           public decimal ParamLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for server password
           /// </summary>
           public string ServerAddress { get; set; }
         }

         public class VATratesRes
         {
           /// <summary>
           ///Value of VAT rate A from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate0 { get; set; }

           /// <summary>
           ///Value of VAT rate B from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate1 { get; set; }

           /// <summary>
           ///Value of VAT rate C from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate2 { get; set; }

           /// <summary>
           ///Value of VAT rate D from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate3 { get; set; }

           /// <summary>
           ///Value of VAT rate E from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate4 { get; set; }

           /// <summary>
           ///Value of VAT rate F from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate5 { get; set; }

           /// <summary>
           ///Value of VAT rate G from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate6 { get; set; }

           /// <summary>
           ///Value of VAT rate H from 7 symbols in format ##.##%
           /// </summary>
           public decimal VATrate7 { get; set; }
         }

         public class DailyReceivedSalesAmountsRes
         {
           /// <summary>
           ///Up to 11 symbols for amount received from sales by cash
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales by others payment
           /// </summary>
           public decimal AmountPaymentOthers { get; set; }
         }

         public class RegistrationInfoRes
         {
           /// <summary>
           ///13 symbols owner's ID number
           /// </summary>
           public string IDNum { get; set; }

           /// <summary>
           ///15 symbols for owner's VAT registration number
           /// </summary>
           public string VATNum { get; set; }

           /// <summary>
           ///Register number on the Fiscal device by registration
           /// </summary>
           public string RegistrationNumber { get; set; }

           /// <summary>
           ///Date of registration
           /// </summary>
           public DateTime RegistrationDate { get; set; }
         }

         public class DailyPObyOperatorRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for the PO by type of payment
           /// </summary>
           public decimal AmountPO_Payments { get; set; }

           /// <summary>
           ///Up to 5 symbols for the total number of operations
           /// </summary>
           public decimal NumPO { get; set; }
         }

         public class TCP_AddressesRes
         {
           /// <summary>
           ///(Address) 1 symbol with value: 
           ///  - '2' - IP address 
           ///  - '3' - Subnet Mask 
           ///  - '4' - Gateway address 
           ///  - '5' - DNS address
           /// </summary>
           public OptionAddressType OptionAddressType { get; set; }

           /// <summary>
           ///15 symbols for the device's addresses
           /// </summary>
           public string DeviceAddress { get; set; }
         }

         public class PLUDifferentNameRes
         {
           /// <summary>
           ///(PLU Number) 5 symbols for article number in format: #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///32 symbols for Albanian PLU
           /// </summary>
           public string PLUNameAlbanian { get; set; }

           /// <summary>
           ///32 symbols for Serbian PLU
           /// </summary>
           public string PLUNameSerbian { get; set; }

           /// <summary>
           ///32 symbols for English PLU
           /// </summary>
           public string PLUNameEnglish { get; set; }
         }

         public class PLUNameRes
         {
           /// <summary>
           ///(PLU Number) 5 symbols for article number in format: #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///32 symbols for PLU name
           /// </summary>
           public string PLUName { get; set; }
         }

         public class DailyCountersRes
         {
           /// <summary>
           ///5 symbols for total number of fiscal receipts
           /// </summary>
           public decimal TotalReciepts { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of the last FM report
           /// </summary>
           public decimal NumLastFMBlock { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of EJ
           /// </summary>
           public decimal NumEJ { get; set; }

           /// <summary>
           ///16 symbols for date and time of the last block storage in FM in format 
           /// "DD-MM-YYYY HH:MM"
           /// </summary>
           public DateTime DateTime { get; set; }
         }

         public class DailyRAbyOperatorRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for the RA by type of payment
           /// </summary>
           public decimal AmountRA_Payments { get; set; }

           /// <summary>
           ///Up to 5 symbols for the total number of operations
           /// </summary>
           public decimal NumRA { get; set; }
         }

         public class HeaderRes
         {
           /// <summary>
           ///(Line Number) 1 symbol with value: 
           ///  - '1' - Header 1 
           ///  - '2' - Header 2 
           ///  - '3' - Header 3 
           ///  - '4' - Header 4 
           ///  - '5' - Header 5 
           ///  - '6' - Header 6 
           ///  - '7' - Header 7 
           ///  - '8' - Header 8
           /// </summary>
           public OptionHeaderLine OptionHeaderLine { get; set; }

           /// <summary>
           ///TextLength symbols
           /// </summary>
           public string HeaderText { get; set; }
         }

         public class DeviceModuleSupportByFirmwareRes
         {
           /// <summary>
           ///1 symbol for LAN support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionLAN OptionLAN { get; set; }

           /// <summary>
           ///1 symbol for WiFi support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionWiFi OptionWiFi { get; set; }

           /// <summary>
           ///1 symbol for GPRS support 
           ///  - '0' - No 
           ///  - '1' - Yes 
           /// BT (Bluetooth) 1 symbol for Bluetooth support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionGPRS OptionGPRS { get; set; }

           /// <summary>
           ///(Bluetooth) 1 symbol for Bluetooth support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionBT OptionBT { get; set; }
         }

         public class WiFi_PasswordRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the WiFi password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's WiFi password
           /// </summary>
           public string Password { get; set; }
         }

         public class PLUgeneralRes
         {
           /// <summary>
           ///5 symbols for article number with leading zeroes in format: #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///32 symbols for article name
           /// </summary>
           public string PLUName { get; set; }

           /// <summary>
           ///1..11 symbols for article price
           /// </summary>
           public decimal Price { get; set; }

           /// <summary>
           ///(Setting price, quantity, type of goods) 1 symbols with value: 
           /// Flags.7=1 
           /// Flags.6=0 
           /// Flags.5=1 Yes, Flags.5=0 No (Fractional quantity disabled) 
           /// Flags.4=1 Yes, Flags.4=0 No (Single Transaction)  
           /// Flags.3=1 Yes, Flags.3=0 No (Allow negative) 
           /// Flags.2=1 Yes, Flags.2=0 No (Monitoring quantity in stock) 
           /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
           /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)
           /// </summary>
           public byte FlagsPriceQty { get; set; }

           /// <summary>
           ///1 character for article VAT Class: 
           ///  - 'A' - VAT Class A 
           ///  - 'B' - VAT Class B 
           ///  - 'C' - VAT Class C 
           ///  - 'D' - VAT Class D 
           ///  - 'E' - VAT Class E 
           ///  - 'F' - VAT Class F 
           ///  - 'G' - VAT Class G 
           ///  - 'H' - VAT Class H
           /// </summary>
           public OptionVATClass OptionVATClass { get; set; }

           /// <summary>
           ///BelongToDepNo + 80h, 1 symbol for PLU department = 0x80 â€¦ 0x93
           /// </summary>
           public int BelongToDepNumber { get; set; }

           /// <summary>
           ///Up to 11 symbols for quantity in stock
           /// </summary>
           public decimal AvailableQuantity { get; set; }

           /// <summary>
           ///13 symbols for article barcode
           /// </summary>
           public string Barcode { get; set; }

           /// <summary>
           ///Up to 11 symbols for PLU accumulated turnover
           /// </summary>
           public decimal TurnoverAmount { get; set; }

           /// <summary>
           ///Up to 11 symbols for Sales quantity of the article
           /// </summary>
           public decimal SoldQuantity { get; set; }

           /// <summary>
           ///Up to 11 symbols for PLU accumulated refund
           /// </summary>
           public decimal RefundAmount { get; set; }

           /// <summary>
           ///Up to 11 symbols for number of refund quantity of PLU
           /// </summary>
           public decimal RefundQTY { get; set; }

           /// <summary>
           ///Up to 5 symbols for the number of the last article report with zeroing
           /// </summary>
           public decimal LastZReportNumber { get; set; }

           /// <summary>
           ///16 symbols for the date and time in format "DD-MM-YYYY HH:MM"
           /// </summary>
           public DateTime LastZReportDate { get; set; }
         }

         public class DailyReceivedSalesAmountsByOperatorRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales change by cash
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales change by others 
           /// payment
           /// </summary>
           public decimal AmountPaymentOthers { get; set; }
         }

         public class LastDailyReportInfoRes
         {
           /// <summary>
           ///10 symbols for last Z-report date in DD-MM-YYYY format
           /// </summary>
           public DateTime LastZDailyReportDate { get; set; }

           /// <summary>
           ///Up to 4 symbols for the number of the last daily report
           /// </summary>
           public decimal LastZDailyReportNum { get; set; }

           /// <summary>
           ///Up to 4 symbols for the number of the last RAM reset
           /// </summary>
           public decimal LastRAMResetNum { get; set; }

           /// <summary>
           ///6 symbols for total number of receipts in format ######
           /// </summary>
           public decimal TotalReceiptCounter { get; set; }

           /// <summary>
           ///Date Time parameter in format: DD-MM-YYYY HH:MM
           /// </summary>
           public DateTime DateTimeLastFiscRec { get; set; }

           /// <summary>
           ///Up to 2 symbols for number of EJ
           /// </summary>
           public string EJNum { get; set; }

           /// <summary>
           ///Up to 4 symbols for first EJ Z-report number
           /// </summary>
           public decimal FirstEJZreport { get; set; }

           /// <summary>
           ///Up to 4 symbols for last EJ Z-report number
           /// </summary>
           public decimal LastEJZreport { get; set; }
         }

         public class StatusRes
         {
           /// <summary>
           ///FM Read only
           /// </summary>
           public bool FM_Read_only { get; set; }

           /// <summary>
           ///Power down in opened fiscal receipt
           /// </summary>
           public bool Power_down_in_opened_fiscal_receipt { get; set; }

           /// <summary>
           ///Printer not ready - overheat
           /// </summary>
           public bool Printer_not_ready_overheat { get; set; }

           /// <summary>
           ///DateTime not set
           /// </summary>
           public bool DateTime_not_set { get; set; }

           /// <summary>
           ///DateTime wrong
           /// </summary>
           public bool DateTime_wrong { get; set; }

           /// <summary>
           ///RAM reset
           /// </summary>
           public bool RAM_reset { get; set; }

           /// <summary>
           ///Hardware clock error
           /// </summary>
           public bool Hardware_clock_error { get; set; }

           /// <summary>
           ///Printer not ready - no paper
           /// </summary>
           public bool Printer_not_ready_no_paper { get; set; }

           /// <summary>
           ///Reports registers Overflow
           /// </summary>
           public bool Reports_registers_Overflow { get; set; }

           /// <summary>
           ///Blocking after 24 hours without report
           /// </summary>
           public bool Blocking_after_24_hours_without_report { get; set; }

           /// <summary>
           ///Daily report is not zeroed
           /// </summary>
           public bool Daily_report_is_not_zeroed { get; set; }

           /// <summary>
           ///Article report is not zeroed
           /// </summary>
           public bool Article_report_is_not_zeroed { get; set; }

           /// <summary>
           ///Operator report is not zeroed
           /// </summary>
           public bool Operator_report_is_not_zeroed { get; set; }

           /// <summary>
           ///Non-printed copy
           /// </summary>
           public bool Non_printed_copy { get; set; }

           /// <summary>
           ///Opened Non-fiscal Receipt
           /// </summary>
           public bool Opened_Non_fiscal_Receipt { get; set; }

           /// <summary>
           ///Opened Fiscal Receipt
           /// </summary>
           public bool Opened_Fiscal_Receipt { get; set; }

           /// <summary>
           ///fiscal receipt type 1
           /// </summary>
           public bool fiscal_receipt_type_1 { get; set; }

           /// <summary>
           ///fiscal receipt type 2
           /// </summary>
           public bool fiscal_receipt_type_2 { get; set; }

           /// <summary>
           ///fiscal receipt type 3
           /// </summary>
           public bool fiscal_receipt_type_3 { get; set; }

           /// <summary>
           ///SD card near full
           /// </summary>
           public bool SD_card_near_full { get; set; }

           /// <summary>
           ///SD card full
           /// </summary>
           public bool SD_card_full { get; set; }

           /// <summary>
           ///No FM module
           /// </summary>
           public bool No_FM_module { get; set; }

           /// <summary>
           ///FM error
           /// </summary>
           public bool FM_error { get; set; }

           /// <summary>
           ///FM full
           /// </summary>
           public bool FM_full { get; set; }

           /// <summary>
           ///FM near full
           /// </summary>
           public bool FM_near_full { get; set; }

           /// <summary>
           ///Decimal point (1=fract, 0=whole)
           /// </summary>
           public bool Decimal_point { get; set; }

           /// <summary>
           ///FM fiscalized
           /// </summary>
           public bool FM_fiscalized { get; set; }

           /// <summary>
           ///FM produced
           /// </summary>
           public bool FM_produced { get; set; }

           /// <summary>
           ///Printer: automatic cutting
           /// </summary>
           public bool Printer_automatic_cutting { get; set; }

           /// <summary>
           ///External display: transparent display
           /// </summary>
           public bool External_display_transparent_display { get; set; }

           /// <summary>
           ///Missing display
           /// </summary>
           public bool Missing_display { get; set; }

           /// <summary>
           ///Drawer: automatic opening
           /// </summary>
           public bool Drawer_automatic_opening { get; set; }

           /// <summary>
           ///Customer logo included in the receipt
           /// </summary>
           public bool Customer_logo_included_in_the_receipt { get; set; }

           /// <summary>
           ///Blocking after 10 days without communication
           /// </summary>
           public bool Blocking_after_10_days_without_communication { get; set; }

           /// <summary>
           ///Service jumper
           /// </summary>
           public bool Service_jumper { get; set; }

           /// <summary>
           ///Missing certificates
           /// </summary>
           public bool Missing_certificates { get; set; }

           /// <summary>
           ///Wrong SD card
           /// </summary>
           public bool Wrong_SD_card { get; set; }

           /// <summary>
           ///Deregistered
           /// </summary>
           public bool Deregistered { get; set; }

           /// <summary>
           ///No SIM card
           /// </summary>
           public bool No_SIM_card { get; set; }

           /// <summary>
           ///No GPRS Modem
           /// </summary>
           public bool No_GPRS_Modem { get; set; }

           /// <summary>
           ///No mobile operator
           /// </summary>
           public bool No_mobile_operator { get; set; }

           /// <summary>
           ///No GPRS service
           /// </summary>
           public bool No_GPRS_service { get; set; }

           /// <summary>
           ///Near end of paper
           /// </summary>
           public bool Near_end_of_paper { get; set; }

           /// <summary>
           ///CM error
           /// </summary>
           public bool CM_error { get; set; }
         }

         public class DepartmentNameRes
         {
           /// <summary>
           ///2 symbols department number in format ##
           /// </summary>
           public decimal Number { get; set; }

           /// <summary>
           ///23 characters department name
           /// </summary>
           public string Name { get; set; }
         }

         public class TotalFiscalSumsRes
         {
           /// <summary>
           ///14 s. for total grand sum of sales turnover from fiscal registration
           /// </summary>
           public string SumSalesTurnover { get; set; }

           /// <summary>
           ///14 s. for total VAT sum of sales from fiscal registration
           /// </summary>
           public string SumSalesVAT { get; set; }
         }

         public class PLUpriceRes
         {
           /// <summary>
           ///5 symbols for article number with leading zeroes in format #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///1..10 symbols for article price
           /// </summary>
           public decimal Price { get; set; }

           /// <summary>
           ///1 byte for Price flag with next value: 
           ///  - '0'- Free price is disable valid only programmed price 
           ///  - '1'- Free price is enable 
           ///  - '2'- Limited price
           /// </summary>
           public OptionPrice OptionPrice { get; set; }
         }

         public class DailyReturnedAmountsRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales by cash
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 11 symbols for amount received from sales by others payment
           /// </summary>
           public decimal AmountPaymentOthers { get; set; }
         }

         public class OperatorNamePasswordRes
         {
           /// <summary>
           ///Symbol from 1 to 20 corresponding to the number of operator
           /// </summary>
           public decimal Number { get; set; }

           /// <summary>
           ///20 symbols for operator's name
           /// </summary>
           public string Name { get; set; }

           /// <summary>
           ///4 symbols for operator's password
           /// </summary>
           public string Password { get; set; }
         }

         public class DailyCountersByOperatorRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of the work operators
           /// </summary>
           public decimal WorkOperatorsCounter { get; set; }

           /// <summary>
           ///16 symbols for date and time of the last operator's report in 
           /// format DD-MM-YYYY HH:MM
           /// </summary>
           public DateTime LastOperatorReportDateTime { get; set; }
         }

         public class PaymentsRes
         {
           /// <summary>
           ///10 symbols for type 0 of payment name
           /// </summary>
           public string NamePaym0 { get; set; }

           /// <summary>
           ///10 symbols for type 1 of payment name
           /// </summary>
           public string NamePaym1 { get; set; }

           /// <summary>
           ///10 symbols for type 2 of payment name
           /// </summary>
           public string NamePaym2 { get; set; }

           /// <summary>
           ///10 symbols for type 3 of payment name
           /// </summary>
           public string NamePaym3 { get; set; }
         }

         public class TCP_PasswordRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the TCP password
           /// </summary>
           public string Password { get; set; }
         }

         public class PLUbarcodeRes
         {
           /// <summary>
           ///5 symbols for article number with leading zeroes in format #####
           /// </summary>
           public decimal PLUNum { get; set; }

           /// <summary>
           ///13 symbols for article barcode
           /// </summary>
           public string Barcode { get; set; }
         }

         public class ServerPasswordECRSRes
         {
           /// <summary>
           ///Up to 2 symbols for parameter length
           /// </summary>
           public decimal ParamLength { get; set; }

           /// <summary>
           ///Up to 64 symbols for server password
           /// </summary>
           public string ServerPassword { get; set; }
         }

         public class DailyGeneralRegistersByOperatorRes
         {
           /// <summary>
           ///Symbols from 1 to 20 corresponding to operator's number
           /// </summary>
           public decimal OperNum { get; set; }

           /// <summary>
           ///Up to 5 symbols for daily number of fiscal receipts
           /// </summary>
           public decimal FiscalReciept { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of discounts
           /// </summary>
           public decimal DiscountsNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of discounts
           /// </summary>
           public decimal DiscountsAmount { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of additions
           /// </summary>
           public decimal AdditionsNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of additions
           /// </summary>
           public decimal AdditionsAmount { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of refunds
           /// </summary>
           public decimal RefundNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of refunds
           /// </summary>
           public decimal RefundAmount { get; set; }
         }

         public class GPRS_PasswordRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the GPRS password length
           /// </summary>
           public decimal PassLength { get; set; }

           /// <summary>
           ///Up to 100 symbols for the device's GPRS password
           /// </summary>
           public string Password { get; set; }
         }

         public class FooterRes
         {
           /// <summary>
           ///(Line Number)1 symbol with value: 
           ///  - 'F1' - Footer 1 
           ///  - 'F2' - Footer 2 
           ///  - 'F3' - Footer 3
           /// </summary>
           public OptionFooterLine OptionFooterLine { get; set; }

           /// <summary>
           ///TextLength symbols for footer line
           /// </summary>
           public string FooterText { get; set; }
         }

         public class DailyRARes
         {
           /// <summary>
           ///Up to 11 symbols for RA amounts
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 5 symbols for the total number of operations
           /// </summary>
           public decimal NumRA { get; set; }
         }

         public class GeneralDailyRegistersRes
         {
           /// <summary>
           ///1..5 symbols for daily number of fiscal receipts
           /// </summary>
           public decimal FiscalReciept { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of discounts
           /// </summary>
           public decimal DiscountsNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of discounts
           /// </summary>
           public decimal DiscountsAmount { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of additions
           /// </summary>
           public decimal AdditionsNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of additions
           /// </summary>
           public decimal AdditionsAmount { get; set; }

           /// <summary>
           ///Up to 5 symbols for number of refunds
           /// </summary>
           public decimal RefundNum { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated amount of refund operation
           /// </summary>
           public decimal RefundAmount { get; set; }
         }

         public class TaxiServiceGeneralRes
         {
           /// <summary>
           ///2 symbols for service number with leading zeroes in format: ##
           /// </summary>
           public decimal ServiceNum { get; set; }

           /// <summary>
           ///30 symbols for service name in Albanian
           /// </summary>
           public string ServiceNameAL { get; set; }

           /// <summary>
           ///1 character for article VAT Class: 
           ///  - 'A' - VAT Class A 
           ///  - 'B' - VAT Class B 
           ///  - 'C' - VAT Class C 
           ///  - 'D' - VAT Class D 
           ///  - 'E' - VAT Class E 
           ///  - 'F' - VAT Class F 
           ///  - 'G' - VAT Class G 
           ///  - 'H' - VAT Class H
           /// </summary>
           public OptionVATClass OptionVATClass { get; set; }

           /// <summary>
           ///Up to 11 symbols for taxi service turnover
           /// </summary>
           public decimal TurnoverAmount { get; set; }

           /// <summary>
           ///Up to 11 symbols for Sales quantity of the taxi service
           /// </summary>
           public decimal SoldQuantity { get; set; }
         }

         public class DeviceModuleSupportRes
         {
           /// <summary>
           ///1 symbol for LAN support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionLAN OptionLAN { get; set; }

           /// <summary>
           ///1 symbol for WiFi support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionWiFi OptionWiFi { get; set; }

           /// <summary>
           ///1 symbol for GPRS support 
           ///  - '0' - No 
           ///  - '1' - Yes 
           /// BT (Bluetooth) 1 symbol for Bluetooth support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionGPRS OptionGPRS { get; set; }

           /// <summary>
           ///(Bluetooth) 1 symbol for Bluetooth support 
           ///  - '0' - No 
           ///  - '1' - Yes
           /// </summary>
           public OptionBT OptionBT { get; set; }
         }

         public class WiFi_NetworkNameRes
         {
           /// <summary>
           ///(Length) Up to 3 symbols for the WiFi name length
           /// </summary>
           public decimal WiFiNameLength { get; set; }

           /// <summary>
           ///(Name) Up to 100 symbols for the device's WiFi network name
           /// </summary>
           public string WiFiNetworkName { get; set; }
         }

         public class ParametersRes
         {
           /// <summary>
           ///(POS Number) 4 symbols for number of POS in format ####
           /// </summary>
           public decimal POSNum { get; set; }

           /// <summary>
           ///(Print Logo) 1 symbol of value: 
           ///  - '1' - Yes 
           ///  - '0' - No
           /// </summary>
           public OptionPrintLogo OptionPrintLogo { get; set; }

           /// <summary>
           ///(Auto Open Drawer) 1 symbol of value: 
           ///  - '1' - Yes 
           ///  - '0' - No
           /// </summary>
           public OptionAutoOpenDrawer OptionAutoOpenDrawer { get; set; }

           /// <summary>
           ///(Auto Cut) 1 symbol of value: 
           ///  - '1' - Yes 
           ///  - '0' - No
           /// </summary>
           public OptionAutoCut OptionAutoCut { get; set; }

           /// <summary>
           ///(External Display Management) 1 symbol of value: 
           ///  - '1' - Manual 
           ///  - '0' - Auto
           /// </summary>
           public OptionExternalDispManagement OptionExternalDispManagement { get; set; }

           /// <summary>
           ///(Work Operator Count) 1 symbol of value: 
           ///  - '1' - One 
           ///  - '0' - More
           /// </summary>
           public OptionWorkOperatorCount OptionWorkOperatorCount { get; set; }
         }

         public class VersionRes
         {
           /// <summary>
           ///Up to 50 symbols for Model name
           /// </summary>
           public string Model { get; set; }

           /// <summary>
           ///Up to 20 symbols for Version name and Check sum
           /// </summary>
           public string Version { get; set; }
         }

         public class DailyPORes
         {
           /// <summary>
           ///Up to 11 symbols for PO amount by type of payment
           /// </summary>
           public decimal AmountPayment { get; set; }

           /// <summary>
           ///Up to 5 symbols for the total number of operations
           /// </summary>
           public decimal NumPO { get; set; }
         }

         public class DepartmentOption1Res
         {
           /// <summary>
           ///2 symbols department number in format ##
           /// </summary>
           public decimal Number { get; set; }

           /// <summary>
           ///23 characters department name
           /// </summary>
           public string Name { get; set; }

           /// <summary>
           ///1 character for article VAT Class: 
           ///  - 'A' - VAT Class A 
           ///  - 'B' - VAT Class B 
           ///  - 'C' - VAT Class C 
           ///  - 'D' - VAT Class D 
           ///  - 'E' - VAT Class E 
           ///  - 'F' - VAT Class F 
           ///  - 'G' - VAT Class G 
           ///  - 'H' - VAT Class H
           /// </summary>
           public OptionVATClass OptionVATClass { get; set; }

           /// <summary>
           ///Up to 10 symbols for department price
           /// </summary>
           public decimal Price { get; set; }

           /// <summary>
           ///(Setting price, type of goods) 1 symbol with value: 
           /// Flags.7=1 
           /// Flags.6=0 
           /// Flags.5=0 
           /// Flags.4=0 
           /// Flags.3=1 Yes, Flags.3=0 No (Fractional quantity disabled) 
           /// Flags.2=1 Yes, Flags.2=0 No (Single Transaction) 
           /// Flags.1=1 Yes, Flags.1=0 No (Free price limited) 
           /// Flags.0=1 Yes, Flags.0=0 No (Free price enabled)
           /// </summary>
           public byte FlagsPrice { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated turnover of the department
           /// </summary>
           public decimal Turnover { get; set; }

           /// <summary>
           ///Up to 11 symbols for sold quantity of the department
           /// </summary>
           public decimal SoldQuantity { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated refund amount of the department
           /// </summary>
           public decimal RefundAmount { get; set; }

           /// <summary>
           ///Up to 11 symbols for accumulated refund quantity of department
           /// </summary>
           public decimal RefundQTY { get; set; }

           /// <summary>
           ///Up to 5 symbols for the number of last Z report in format #####
           /// </summary>
           public decimal LastZReportNumber { get; set; }

           /// <summary>
           ///16 symbols for the date and hour in last Z report
           /// </summary>
           public DateTime LastZReportDate { get; set; }
         }

}
